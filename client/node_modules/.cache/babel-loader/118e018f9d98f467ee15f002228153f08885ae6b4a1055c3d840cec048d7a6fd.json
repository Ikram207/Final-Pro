{"ast":null,"code":"const API_URL = 'http://localhost:4000/api'; // adapte selon l'URL de ton backend\n\n// ----------- Utilisateurs -----------\n\nexport async function register(name, email, password) {\n  const res = await fetch(`${API_URL}/users/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  });\n  return res.json();\n}\nexport async function login(email, password) {\n  const res = await fetch(`${API_URL}/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return res.json();\n}\n\n// ----------- Tâches -----------\n\nexport async function createTask(token, taskData) {\n  const res = await fetch(`${API_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(taskData)\n  });\n  return res.json();\n}\nexport async function getTasks(token) {\n  const res = await fetch(`${API_URL}/tasks`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return res.json();\n}\nexport async function updateTask(token, id, updatedData) {\n  const res = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(updatedData)\n  });\n  return res.json();\n}\nexport async function deleteTask(token, id) {\n  const res = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return res.json();\n}","map":{"version":3,"names":["API_URL","register","name","email","password","res","fetch","method","headers","body","JSON","stringify","json","login","createTask","token","taskData","Authorization","getTasks","updateTask","id","updatedData","deleteTask"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:4000/api'; // adapte selon l'URL de ton backend\r\n\r\n// ----------- Utilisateurs -----------\r\n\r\nexport async function register(name, email, password) {\r\n  const res = await fetch(`${API_URL}/users/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ name, email, password }),\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function login(email, password) {\r\n  const res = await fetch(`${API_URL}/users/login`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  return res.json();\r\n}\r\n\r\n// ----------- Tâches -----------\r\n\r\nexport async function createTask(token, taskData) {\r\n  const res = await fetch(`${API_URL}/tasks`, {\r\n    method: 'POST',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function getTasks(token) {\r\n  const res = await fetch(`${API_URL}/tasks`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function updateTask(token, id, updatedData) {\r\n  const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n    method: 'PUT',\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(updatedData),\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function deleteTask(token, id) {\r\n  const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n    method: 'DELETE',\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;;AAEA,OAAO,eAAeC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,iBAAiB,EAAE;IACnDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC;EAChD,CAAC,CAAC;EACF,OAAOC,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,KAAKA,CAACV,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,cAAc,EAAE;IAChDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOC,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;;AAEA;;AAEA,OAAO,eAAeE,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAChD,MAAMX,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,EAAE;IAC1CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCS,aAAa,EAAE,UAAUF,KAAK;IAChC,CAAC;IACDN,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,QAAQ;EAC/B,CAAC,CAAC;EACF,OAAOX,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeM,QAAQA,CAACH,KAAK,EAAE;EACpC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,EAAE;IAC1CQ,OAAO,EAAE;MAAES,aAAa,EAAE,UAAUF,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,OAAOV,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeO,UAAUA,CAACJ,KAAK,EAAEK,EAAE,EAAEC,WAAW,EAAE;EACvD,MAAMhB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,UAAUoB,EAAE,EAAE,EAAE;IAChDb,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCS,aAAa,EAAE,UAAUF,KAAK;IAChC,CAAC;IACDN,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,WAAW;EAClC,CAAC,CAAC;EACF,OAAOhB,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeU,UAAUA,CAACP,KAAK,EAAEK,EAAE,EAAE;EAC1C,MAAMf,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,UAAUoB,EAAE,EAAE,EAAE;IAChDb,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MAAES,aAAa,EAAE,UAAUF,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,OAAOV,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
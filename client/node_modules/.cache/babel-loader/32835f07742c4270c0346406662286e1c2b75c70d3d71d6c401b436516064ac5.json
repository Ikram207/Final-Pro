{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\components\\\\TaskForm.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import { createTask } from '../services/api';\n\n// // export default function TaskForm({ token }) {\n// //   const [title, setTitle] = useState('');\n// //   const [dueDate, setDueDate] = useState('');\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setError('');\n// //     setSuccess('');\n// //     if (!title) {\n// //       setError('Le titre est obligatoire');\n// //       return;\n// //     }\n// //     const result = await createTask(token, { title, dueDate });\n// //     if (result._id) {\n// //       setSuccess('Tâche créée !');\n// //       setTitle('');\n// //       setDueDate('');\n// //       window.dispatchEvent(new Event('taskAdded')); // événement pour rafraichir la liste\n// //     } else {\n// //       setError(result.error || 'Erreur création tâche');\n// //     }\n// //   };\n\n// //   return (\n// //     <form onSubmit={handleSubmit}>\n// //       <h3>Ajouter une tâche</h3>\n// //       <input\n// //         type=\"text\"\n// //         placeholder=\"Titre\"\n// //         value={title}\n// //         onChange={e => setTitle(e.target.value)}\n// //         required\n// //       />\n// //       <br />\n// //       <input\n// //         type=\"date\"\n// //         value={dueDate}\n// //         onChange={e => setDueDate(e.target.value)}\n// //       />\n// //       <br />\n// //       <button type=\"submit\">Ajouter</button>\n// //       {success && <p style={{color: 'green'}}>{success}</p>}\n// //       {error && <p style={{color: 'red'}}>{error}</p>}\n// //     </form>\n// //   );\n// // }\n// import React, { useState, useEffect } from 'react';\n\n// export default function TaskForm({ token, onSave, editingTask, cancelEdit }) {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [dueDate, setDueDate] = useState('');\n//   const [status, setStatus] = useState('pending');\n\n//   useEffect(() => {\n//     if (editingTask) {\n//       setTitle(editingTask.title);\n//       setDescription(editingTask.description);\n//       setDueDate(editingTask.dueDate.substring(0, 10));\n//       setStatus(editingTask.status);\n//     }\n//   }, [editingTask]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!title.trim()) {\n//       alert('Le titre est requis');\n//       return;\n//     }\n//     const updatedTask = { title, description, dueDate, status };\n//     await onSave(updatedTask);\n//     if (!editingTask) {\n//       setTitle('');\n//       setDescription('');\n//       setDueDate('');\n//       setStatus('pending');\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input value={title} onChange={(e) => setTitle(e.target.value)} required />\n//       <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\n//       <input type=\"date\" value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\n//       <select value={status} onChange={(e) => setStatus(e.target.value)}>\n//         <option value=\"pending\">En attente</option>\n//         <option value=\"completed\">Terminé</option>\n//       </select>\n//       <button type=\"submit\">{editingTask ? 'Mettre à jour' : 'Ajouter'}</button>\n//       {editingTask && <button type=\"button\" onClick={cancelEdit}>Annuler</button>}\n//     </form>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import '../styles/Task.css';\n// export default function TaskForm({ token, onSave, editingTask, cancelEdit }) {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [dueDate, setDueDate] = useState('');\n//   const [status, setStatus] = useState('pending');\n\n//   useEffect(() => {\n//     if (editingTask) {\n//       setTitle(editingTask.title || '');\n//       setDescription(editingTask.description || '');\n//       setDueDate(editingTask.dueDate ? editingTask.dueDate.substring(0, 10) : '');\n//       setStatus(editingTask.status || 'pending');\n//     } else {\n//       setTitle('');\n//       setDescription('');\n//       setDueDate('');\n//       setStatus('pending');\n//     }\n//   }, [editingTask]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!title.trim()) {\n//       alert('Le titre est requis');\n//       return;\n//     }\n//     await onSave({ title, description, dueDate, status });\n//   };\n\n//   return (\n//     <form \n//       onSubmit={handleSubmit} \n//       style={{ padding: '15px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '20px', background: '#f9f9f9' }}\n//     >\n//       <h3>{editingTask ? 'Modifier la tâche' : 'Ajouter une tâche'}</h3>\n\n//       <input \n//         type=\"text\"\n//         placeholder=\"Titre\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         required\n//         style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n//       />\n\n//       <textarea\n//         placeholder=\"Description\"\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n//       />\n\n//       <input \n//         type=\"date\"\n//         value={dueDate}\n//         onChange={(e) => setDueDate(e.target.value)}\n//         style={{ padding: '8px', marginBottom: '10px', width: '100%' }}\n//       />\n\n//       <select \n//         value={status}\n//         onChange={(e) => setStatus(e.target.value)}\n//         style={{ padding: '8px', marginBottom: '10px', width: '100%' }}\n//       >\n//         <option value=\"pending\">En attente</option>\n//         <option value=\"completed\">Terminée</option>\n//       </select>\n\n//       <button type=\"submit\" style={{ padding: '8px 12px', background: '#28a745', color: '#fff', border: 'none', borderRadius: '4px' }}>\n//         {editingTask ? 'Mettre à jour' : 'Ajouter'}\n//       </button>\n\n//       {editingTask && (\n//         <button \n//           type=\"button\" \n//           onClick={cancelEdit} \n//           style={{ padding: '8px 12px', background: '#6c757d', color: '#fff', border: 'none', borderRadius: '4px', marginLeft: '8px' }}\n//         >\n//           Annuler\n//         </button>\n//       )}\n//     </form>\n//   );\n// }\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskForm({\n  onSave,\n  editingTask,\n  cancelEdit\n}) {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  // Remplir le formulaire avec la tâche en cours d'édition\n  useEffect(() => {\n    if (editingTask) {\n      setTitle(editingTask.title || \"\");\n      setDescription(editingTask.description || \"\");\n      setDueDate(editingTask.dueDate || \"\");\n    }\n  }, [editingTask]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    const updatedTask = {\n      ...editingTask,\n      title,\n      description,\n      dueDate\n    };\n    onSave(updatedTask);\n    setTitle(\"\");\n    setDescription(\"\");\n    setDueDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Titre\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: dueDate,\n      onChange: e => setDueDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: editingTask ? \"Mettre à jour\" : \"Ajouter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), editingTask && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: cancelEdit,\n      children: \"Annuler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskForm, \"Xk2d/5T2SKBDD+2toRUxXOJnqVA=\");\n_c = TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskForm","onSave","editingTask","cancelEdit","_s","title","setTitle","description","setDescription","dueDate","setDueDate","handleSubmit","e","preventDefault","updatedTask","onSubmit","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/components/TaskForm.jsx"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import { createTask } from '../services/api';\r\n\r\n// // export default function TaskForm({ token }) {\r\n// //   const [title, setTitle] = useState('');\r\n// //   const [dueDate, setDueDate] = useState('');\r\n// //   const [error, setError] = useState('');\r\n// //   const [success, setSuccess] = useState('');\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault();\r\n// //     setError('');\r\n// //     setSuccess('');\r\n// //     if (!title) {\r\n// //       setError('Le titre est obligatoire');\r\n// //       return;\r\n// //     }\r\n// //     const result = await createTask(token, { title, dueDate });\r\n// //     if (result._id) {\r\n// //       setSuccess('Tâche créée !');\r\n// //       setTitle('');\r\n// //       setDueDate('');\r\n// //       window.dispatchEvent(new Event('taskAdded')); // événement pour rafraichir la liste\r\n// //     } else {\r\n// //       setError(result.error || 'Erreur création tâche');\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <form onSubmit={handleSubmit}>\r\n// //       <h3>Ajouter une tâche</h3>\r\n// //       <input\r\n// //         type=\"text\"\r\n// //         placeholder=\"Titre\"\r\n// //         value={title}\r\n// //         onChange={e => setTitle(e.target.value)}\r\n// //         required\r\n// //       />\r\n// //       <br />\r\n// //       <input\r\n// //         type=\"date\"\r\n// //         value={dueDate}\r\n// //         onChange={e => setDueDate(e.target.value)}\r\n// //       />\r\n// //       <br />\r\n// //       <button type=\"submit\">Ajouter</button>\r\n// //       {success && <p style={{color: 'green'}}>{success}</p>}\r\n// //       {error && <p style={{color: 'red'}}>{error}</p>}\r\n// //     </form>\r\n// //   );\r\n// // }\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// export default function TaskForm({ token, onSave, editingTask, cancelEdit }) {\r\n//   const [title, setTitle] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n//   const [dueDate, setDueDate] = useState('');\r\n//   const [status, setStatus] = useState('pending');\r\n\r\n//   useEffect(() => {\r\n//     if (editingTask) {\r\n//       setTitle(editingTask.title);\r\n//       setDescription(editingTask.description);\r\n//       setDueDate(editingTask.dueDate.substring(0, 10));\r\n//       setStatus(editingTask.status);\r\n//     }\r\n//   }, [editingTask]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!title.trim()) {\r\n//       alert('Le titre est requis');\r\n//       return;\r\n//     }\r\n//     const updatedTask = { title, description, dueDate, status };\r\n//     await onSave(updatedTask);\r\n//     if (!editingTask) {\r\n//       setTitle('');\r\n//       setDescription('');\r\n//       setDueDate('');\r\n//       setStatus('pending');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <input value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//       <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\r\n//       <input type=\"date\" value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n//       <select value={status} onChange={(e) => setStatus(e.target.value)}>\r\n//         <option value=\"pending\">En attente</option>\r\n//         <option value=\"completed\">Terminé</option>\r\n//       </select>\r\n//       <button type=\"submit\">{editingTask ? 'Mettre à jour' : 'Ajouter'}</button>\r\n//       {editingTask && <button type=\"button\" onClick={cancelEdit}>Annuler</button>}\r\n//     </form>\r\n//   );\r\n// }\r\n// import React, { useState, useEffect } from 'react';\r\n// import '../styles/Task.css';\r\n// export default function TaskForm({ token, onSave, editingTask, cancelEdit }) {\r\n//   const [title, setTitle] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n//   const [dueDate, setDueDate] = useState('');\r\n//   const [status, setStatus] = useState('pending');\r\n\r\n//   useEffect(() => {\r\n//     if (editingTask) {\r\n//       setTitle(editingTask.title || '');\r\n//       setDescription(editingTask.description || '');\r\n//       setDueDate(editingTask.dueDate ? editingTask.dueDate.substring(0, 10) : '');\r\n//       setStatus(editingTask.status || 'pending');\r\n//     } else {\r\n//       setTitle('');\r\n//       setDescription('');\r\n//       setDueDate('');\r\n//       setStatus('pending');\r\n//     }\r\n//   }, [editingTask]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!title.trim()) {\r\n//       alert('Le titre est requis');\r\n//       return;\r\n//     }\r\n//     await onSave({ title, description, dueDate, status });\r\n//   };\r\n\r\n//   return (\r\n//     <form \r\n//       onSubmit={handleSubmit} \r\n//       style={{ padding: '15px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '20px', background: '#f9f9f9' }}\r\n//     >\r\n//       <h3>{editingTask ? 'Modifier la tâche' : 'Ajouter une tâche'}</h3>\r\n      \r\n//       <input \r\n//         type=\"text\"\r\n//         placeholder=\"Titre\"\r\n//         value={title}\r\n//         onChange={(e) => setTitle(e.target.value)}\r\n//         required\r\n//         style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\r\n//       />\r\n      \r\n//       <textarea\r\n//         placeholder=\"Description\"\r\n//         value={description}\r\n//         onChange={(e) => setDescription(e.target.value)}\r\n//         style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\r\n//       />\r\n      \r\n//       <input \r\n//         type=\"date\"\r\n//         value={dueDate}\r\n//         onChange={(e) => setDueDate(e.target.value)}\r\n//         style={{ padding: '8px', marginBottom: '10px', width: '100%' }}\r\n//       />\r\n      \r\n//       <select \r\n//         value={status}\r\n//         onChange={(e) => setStatus(e.target.value)}\r\n//         style={{ padding: '8px', marginBottom: '10px', width: '100%' }}\r\n//       >\r\n//         <option value=\"pending\">En attente</option>\r\n//         <option value=\"completed\">Terminée</option>\r\n//       </select>\r\n\r\n//       <button type=\"submit\" style={{ padding: '8px 12px', background: '#28a745', color: '#fff', border: 'none', borderRadius: '4px' }}>\r\n//         {editingTask ? 'Mettre à jour' : 'Ajouter'}\r\n//       </button>\r\n      \r\n//       {editingTask && (\r\n//         <button \r\n//           type=\"button\" \r\n//           onClick={cancelEdit} \r\n//           style={{ padding: '8px 12px', background: '#6c757d', color: '#fff', border: 'none', borderRadius: '4px', marginLeft: '8px' }}\r\n//         >\r\n//           Annuler\r\n//         </button>\r\n//       )}\r\n//     </form>\r\n//   );\r\n// }\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport default function TaskForm({ onSave, editingTask, cancelEdit }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [dueDate, setDueDate] = useState(\"\");\r\n\r\n  // Remplir le formulaire avec la tâche en cours d'édition\r\n  useEffect(() => {\r\n    if (editingTask) {\r\n      setTitle(editingTask.title || \"\");\r\n      setDescription(editingTask.description || \"\");\r\n      setDueDate(editingTask.dueDate || \"\");\r\n    }\r\n  }, [editingTask]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const updatedTask = {\r\n      ...editingTask,\r\n      title,\r\n      description,\r\n      dueDate\r\n    };\r\n    onSave(updatedTask);\r\n    setTitle(\"\");\r\n    setDescription(\"\");\r\n    setDueDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Titre\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      <textarea\r\n        placeholder=\"Description\"\r\n        value={description}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n      ></textarea>\r\n      <input\r\n        type=\"date\"\r\n        value={dueDate}\r\n        onChange={(e) => setDueDate(e.target.value)}\r\n      />\r\n      <button type=\"submit\">{editingTask ? \"Mettre à jour\" : \"Ajouter\"}</button>\r\n      {editingTask && <button onClick={cancelEdit}>Annuler</button>}\r\n    </form>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,QAAQA,CAAC;EAAEC,MAAM;EAAEC,WAAW;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACpE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd,IAAIK,WAAW,EAAE;MACfI,QAAQ,CAACJ,WAAW,CAACG,KAAK,IAAI,EAAE,CAAC;MACjCG,cAAc,CAACN,WAAW,CAACK,WAAW,IAAI,EAAE,CAAC;MAC7CG,UAAU,CAACR,WAAW,CAACO,OAAO,IAAI,EAAE,CAAC;IACvC;EACF,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;EAEjB,MAAMS,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,WAAW,GAAG;MAClB,GAAGZ,WAAW;MACdG,KAAK;MACLE,WAAW;MACXE;IACF,CAAC;IACDR,MAAM,CAACa,WAAW,CAAC;IACnBR,QAAQ,CAAC,EAAE,CAAC;IACZE,cAAc,CAAC,EAAE,CAAC;IAClBE,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACEX,OAAA;IAAMgB,QAAQ,EAAEJ,YAAa;IAAAK,QAAA,gBAC3BjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAEd,KAAM;MACbe,QAAQ,EAAGR,CAAC,IAAKN,QAAQ,CAACM,CAAC,CAACS,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACF1B,OAAA;MACEmB,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAEZ,WAAY;MACnBa,QAAQ,EAAGR,CAAC,IAAKJ,cAAc,CAACI,CAAC,CAACS,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eACZ1B,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXE,KAAK,EAAEV,OAAQ;MACfW,QAAQ,EAAGR,CAAC,IAAKF,UAAU,CAACE,CAAC,CAACS,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACF1B,OAAA;MAAQkB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAEd,WAAW,GAAG,eAAe,GAAG;IAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EACzEvB,WAAW,iBAAIH,OAAA;MAAQ2B,OAAO,EAAEvB,UAAW;MAAAa,QAAA,EAAC;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEX;AAACrB,EAAA,CAlDuBJ,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     // Fetch tasks after login\n//     const { getTasks } = await import('./services/api');\n//     const fetched = await getTasks(jwt);\n//     setTasks(Array.isArray(fetched) ? fetched : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setView('login');\n//   };\n\n//   // Listen for taskAdded event to refresh tasks\n//   React.useEffect(() => {\n//     if (!token || view !== 'tasks') return;\n//     const { getTasks } = require('./services/api');\n//     const fetchTasks = async () => {\n//       const fetched = await getTasks(token);\n//       setTasks(Array.isArray(fetched) ? fetched : []);\n//     };\n//     fetchTasks();\n//     const handler = () => fetchTasks();\n//     window.addEventListener('taskAdded', handler);\n//     return () => window.removeEventListener('taskAdded', handler);\n//   }, [token, view]);\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\n//       {!token && view === 'login' && (\n//         <>\n//           <Login onLogin={handleLogin} />\n//           <p>\n//             Pas de compte ?{' '}\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {!token && view === 'register' && (\n//         <>\n//           <Register onRegister={() => setView('login')} />\n//           <p>\n//             Déjà un compte ?{' '}\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <button onClick={handleLogout}>Déconnexion</button>\n//           <TaskForm token={token} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// // import React, { useState, useEffect } from 'react';\n// // import Navbar from './components/Navbar';\n// // import Login from './components/Login';\n// // import Register from './components/Register';\n// // import TaskForm from './components/TaskForm';\n// // import TaskList from './components/TaskList';\n// // import IdeaForm from './components/IdeaForm';\n// // import IdeaTable from './components/IdeaTable';\n// // import { getTasks, getIdeas } from './services/api';\n\n// // export default function App() {\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\n// //   const [view, setView] = useState('login');\n// //   const [tasks, setTasks] = useState([]);\n// //   const [ideas, setIdeas] = useState([]);\n\n// //   const handleLogin = async (jwt) => {\n// //     localStorage.setItem('token', jwt);\n// //     setToken(jwt);\n// //     setView('tasks');\n\n// //     const fetchedTasks = await getTasks(jwt);\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n// //     const fetchedIdeas = await getIdeas(jwt);\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem('token');\n// //     setToken('');\n// //     setTasks([]);\n// //     setIdeas([]);\n// //     setView('login');\n// //   };\n\n// //   // Rafraîchir les données quand on change de vue\n// //   useEffect(() => {\n// //     if (!token) return;\n// //     if (view === 'tasks') {\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n// //     }\n// //     if (view === 'ideas') {\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n// //     }\n// //   }, [view, token]);\n\n// //   return (\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n// //       {token && view === 'tasks' && (\n// //         <>\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n// //         </>\n// //       )}\n\n// //       {token && view === 'ideas' && (\n// //         <>\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n// //         </>\n// //       )}\n// //     </div>\n// //   );\n// // }\n// --------------------------------------------\n// import React, { useState, useEffect } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Navbar from './components/Navbar';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\n\n// export default function App() {\n//   // Récupérer token en localStorage si présent\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   // Définir la page active selon si token existe ou pas\n//   // Si token, plateforme; sinon login par défaut\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\n\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   // Charger les données à chaque changement de token ou view\n//   useEffect(() => {\n//     if (!token) return;\n\n//     if (view === 'tasks') {\n//       getTasks(token)\n//         .then(data => setTasks(data))\n//         .catch(console.error);\n//     } else if (view === 'ideas') {\n//       getIdeas(token)\n//         .then(data => setIdeas(data))\n//         .catch(console.error);\n//     }\n//   }, [token, view]);\n\n//   // Gestion login réussie : stocker token, passer à la plateforme\n//   function handleLogin(newToken) {\n//     localStorage.setItem('token', newToken);\n//     setToken(newToken);\n//     setPage('platform');  // on passe à la plateforme après login\n//   }\n\n//   // Gestion logout : supprimer token, revenir au login\n//   function handleLogout() {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setPage('login');  // revenir à la page login\n//   }\n\n//   // Affichage conditionnel selon page\n//   if (page === 'login') {\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\n//   }\n\n//   if (page === 'register') {\n//     return <Register goToLogin={() => setPage('login')} />;\n//   }\n\n//   // Page plateforme principale (tasks + ideas)\n//   return (\n//     <div>\n//       <Navbar setView={setView} handleLogout={handleLogout} />\n//       {view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n//       {view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { getTasks, getIdeas } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login');\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n//     const fetchedIdeas = await getIdeas(jwt);\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setView('login');\n//   };\n\n//   // Rafraîchir les données quand on change de vue\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n//     }\n//     if (view === 'ideas') {\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n//     }\n//   }, [view, token]);\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n\n//       {token && view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// const express = require('express');\n// const app = express();\n// const cors = require('cors');\n// const bodyParser = require('body-parser');\n// const jwt = require('jsonwebtoken');\n\n// const SECRET = 'ton_secret_jwt';\n// const users = []; // stockage en mémoire (à remplacer par une vraie BDD)\n// let tasks = [];\n// let ideas = [];\n\n// app.use(cors());\n// app.use(bodyParser.json());\n\n// // --- AUTHENTIFICATION ---\n\n// // Inscription\n// app.post('/api/register', (req, res) => {\n//   const { name, email, password } = req.body;\n\n//   if (!name || !email || !password) {\n//     return res.status(400).json({ message: 'Tous les champs sont obligatoires (name, email, password)' });\n//   }\n\n//   if (users.find(u => u.email === email)) {\n//     return res.status(400).json({ message: 'Email déjà utilisé' });\n//   }\n\n//   users.push({ name, email, password }); // WARNING: pas de hash ici, à faire en prod !\n//   res.json({ message: 'Utilisateur créé avec succès' });\n// });\n\n// // Connexion\n// app.post('/api/login', (req, res) => {\n//   const { email, password } = req.body;\n\n//   if (!email || !password) {\n//     return res.status(400).json({ message: 'Email et mot de passe sont obligatoires' });\n//   }\n\n//   const user = users.find(u => u.email === email && u.password === password);\n//   if (!user) {\n//     return res.status(401).json({ message: 'Email ou mot de passe invalide' });\n//   }\n\n//   const token = jwt.sign({ email: user.email, name: user.name }, SECRET, { expiresIn: '1h' });\n\n//   res.json({ token });\n// });\n\n// // Middleware d'authentification JWT\n// function authenticateToken(req, res, next) {\n//   const authHeader = req.headers['authorization'];\n//   const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n//   if (!token) return res.status(401).json({ message: 'Token manquant' });\n\n//   jwt.verify(token, SECRET, (err, user) => {\n//     if (err) return res.status(403).json({ message: 'Token invalide' });\n//     req.user = user; // payload décodé\n//     next();\n//   });\n// }\n\n// // --- ROUTES TASKS ---\n\n// // Récupérer toutes les tâches de l'utilisateur\n// app.get('/api/tasks', authenticateToken, (req, res) => {\n//   const userEmail = req.user.email;\n//   const userTasks = tasks.filter(task => task.owner === userEmail);\n//   res.json(userTasks);\n// });\n\n// // Créer une tâche\n// app.post('/api/tasks', authenticateToken, (req, res) => {\n//   const { title, description, dueDate, status } = req.body;\n//   const newTask = {\n//     id: tasks.length + 1,\n//     title,\n//     description,\n//     dueDate,\n//     status,\n//     owner: req.user.email,\n//   };\n//   tasks.push(newTask);\n//   res.status(201).json(newTask);\n// });\n\n// // Modifier une tâche\n// app.put('/api/tasks/:id', authenticateToken, (req, res) => {\n//   const id = parseInt(req.params.id);\n//   const task = tasks.find(t => t.id === id && t.owner === req.user.email);\n//   if (!task) return res.status(404).json({ message: 'Tâche non trouvée' });\n\n//   const { title, description, dueDate, status } = req.body;\n//   if (title !== undefined) task.title = title;\n//   if (description !== undefined) task.description = description;\n//   if (dueDate !== undefined) task.dueDate = dueDate;\n//   if (status !== undefined) task.status = status;\n\n//   res.json(task);\n// });\n\n// // Supprimer une tâche\n// app.delete('/api/tasks/:id', authenticateToken, (req, res) => {\n//   const id = parseInt(req.params.id);\n//   const index = tasks.findIndex(t => t.id === id && t.owner === req.user.email);\n//   if (index === -1) return res.status(404).json({ message: 'Tâche non trouvée' });\n//   tasks.splice(index, 1);\n//   res.json({ message: 'Tâche supprimée' });\n// });\n\n// // --- ROUTES IDEAS ---\n\n// // Récupérer toutes les idées de l'utilisateur\n// app.get('/api/ideas', authenticateToken, (req, res) => {\n//   const userEmail = req.user.email;\n//   const userIdeas = ideas.filter(idea => idea.owner === userEmail);\n//   res.json(userIdeas);\n// });\n\n// // Créer une idée\n// app.post('/api/ideas', authenticateToken, (req, res) => {\n//   const { title, description } = req.body;\n//   const newIdea = {\n//     id: ideas.length + 1,\n//     title,\n//     description,\n//     owner: req.user.email,\n//   };\n//   ideas.push(newIdea);\n//   res.status(201).json(newIdea);\n// });\n\n// // Modifier une idée\n// app.put('/api/ideas/:id', authenticateToken, (req, res) => {\n//   const id = parseInt(req.params.id);\n//   const idea = ideas.find(i => i.id === id && i.owner === req.user.email);\n//   if (!idea) return res.status(404).json({ message: 'Idée non trouvée' });\n\n//   const { title, description } = req.body;\n//   if (title !== undefined) idea.title = title;\n//   if (description !== undefined) idea.description = description;\n\n//   res.json(idea);\n// });\n\n// // Supprimer une idée\n// app.delete('/api/ideas/:id', authenticateToken, (req, res) => {\n//   const id = parseInt(req.params.id);\n//   const index = ideas.findIndex(i => i.id === id && i.owner === req.user.email);\n//   if (index === -1) return res.status(404).json({ message: 'Idée non trouvée' });\n//   ideas.splice(index, 1);\n//   res.json({ message: 'Idée supprimée' });\n// });\n\n// // Démarrage du serveur\n// const PORT = process.env.PORT || 5000;\n// app.listen(PORT, () => {\n//   console.log(`Serveur démarré sur le port ${PORT}`);\n// });\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport IdeaForm from './components/IdeaForm';\nimport IdeaTable from './components/IdeaTable';\nimport { getTasks, getIdeas } from './services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [page, setPage] = useState(token ? 'platform' : 'login'); // login | register | platform\n  const [view, setView] = useState('tasks'); // 'tasks' ou 'ideas'\n\n  const [tasks, setTasks] = useState([]);\n  const [ideas, setIdeas] = useState([]);\n\n  // Charger les données quand token ou view change\n  useEffect(() => {\n    if (!token) return;\n    if (view === 'tasks') {\n      getTasks(token).then(data => setTasks(Array.isArray(data) ? data : [])).catch(console.error);\n    } else if (view === 'ideas') {\n      getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : [])).catch(console.error);\n    }\n  }, [token, view]);\n\n  // Après login\n  const handleLogin = newToken => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n    setPage('platform');\n  };\n\n  // Après logout\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setTasks([]);\n    setIdeas([]);\n    setPage('login');\n  };\n  if (page === 'login') {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin,\n      goToRegister: () => setPage('register')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 12\n    }, this);\n  }\n  if (page === 'register') {\n    return /*#__PURE__*/_jsxDEV(Register, {\n      goToLogin: () => setPage('login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Page principale\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: 'auto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      style: {\n        marginBottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('tasks'),\n        disabled: view === 'tasks',\n        children: \"T\\xE2ches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('ideas'),\n        disabled: view === 'ideas',\n        style: {\n          marginLeft: 10\n        },\n        children: \"Id\\xE9es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        style: {\n          float: 'right'\n        },\n        children: \"D\\xE9connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), view === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        token: token,\n        onTaskAdded: newTask => setTasks([...tasks, newTask])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        token: token,\n        tasks: tasks,\n        setTasks: setTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), view === 'ideas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IdeaForm, {\n        token: token,\n        onIdeaAdded: newIdea => setIdeas([...ideas, newIdea])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IdeaTable, {\n        token: token,\n        ideas: ideas,\n        setIdeas: setIdeas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+u6owTSAnYOP+643KmA4hZLdlgA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Register","TaskForm","TaskList","IdeaForm","IdeaTable","getTasks","getIdeas","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","localStorage","getItem","page","setPage","view","setView","tasks","setTasks","ideas","setIdeas","then","data","Array","isArray","catch","console","error","handleLogin","newToken","setItem","handleLogout","removeItem","onLogin","goToRegister","fileName","_jsxFileName","lineNumber","columnNumber","goToLogin","style","maxWidth","margin","padding","children","marginBottom","onClick","disabled","marginLeft","float","onTaskAdded","newTask","onIdeaAdded","newIdea","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     // Fetch tasks after login\r\n//     const { getTasks } = await import('./services/api');\r\n//     const fetched = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetched) ? fetched : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Listen for taskAdded event to refresh tasks\r\n//   React.useEffect(() => {\r\n//     if (!token || view !== 'tasks') return;\r\n//     const { getTasks } = require('./services/api');\r\n//     const fetchTasks = async () => {\r\n//       const fetched = await getTasks(token);\r\n//       setTasks(Array.isArray(fetched) ? fetched : []);\r\n//     };\r\n//     fetchTasks();\r\n//     const handler = () => fetchTasks();\r\n//     window.addEventListener('taskAdded', handler);\r\n//     return () => window.removeEventListener('taskAdded', handler);\r\n//   }, [token, view]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n//       {!token && view === 'login' && (\r\n//         <>\r\n//           <Login onLogin={handleLogin} />\r\n//           <p>\r\n//             Pas de compte ?{' '}\r\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {!token && view === 'register' && (\r\n//         <>\r\n//           <Register onRegister={() => setView('login')} />\r\n//           <p>\r\n//             Déjà un compte ?{' '}\r\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <button onClick={handleLogout}>Déconnexion</button>\r\n//           <TaskForm token={token} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import Navbar from './components/Navbar';\r\n// // import Login from './components/Login';\r\n// // import Register from './components/Register';\r\n// // import TaskForm from './components/TaskForm';\r\n// // import TaskList from './components/TaskList';\r\n// // import IdeaForm from './components/IdeaForm';\r\n// // import IdeaTable from './components/IdeaTable';\r\n// // import { getTasks, getIdeas } from './services/api';\r\n\r\n// // export default function App() {\r\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n// //   const [view, setView] = useState('login');\r\n// //   const [tasks, setTasks] = useState([]);\r\n// //   const [ideas, setIdeas] = useState([]);\r\n\r\n// //   const handleLogin = async (jwt) => {\r\n// //     localStorage.setItem('token', jwt);\r\n// //     setToken(jwt);\r\n// //     setView('tasks');\r\n\r\n// //     const fetchedTasks = await getTasks(jwt);\r\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n// //     const fetchedIdeas = await getIdeas(jwt);\r\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setToken('');\r\n// //     setTasks([]);\r\n// //     setIdeas([]);\r\n// //     setView('login');\r\n// //   };\r\n\r\n// //   // Rafraîchir les données quand on change de vue\r\n// //   useEffect(() => {\r\n// //     if (!token) return;\r\n// //     if (view === 'tasks') {\r\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //     if (view === 'ideas') {\r\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //   }, [view, token]);\r\n\r\n// //   return (\r\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n// //       {token && view === 'tasks' && (\r\n// //         <>\r\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {token && view === 'ideas' && (\r\n// //         <>\r\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n// //         </>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n// --------------------------------------------\r\n// import React, { useState, useEffect } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import Navbar from './components/Navbar';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\r\n\r\n// export default function App() {\r\n//   // Récupérer token en localStorage si présent\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  \r\n//   // Définir la page active selon si token existe ou pas\r\n//   // Si token, plateforme; sinon login par défaut\r\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\r\n  \r\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   // Charger les données à chaque changement de token ou view\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     if (view === 'tasks') {\r\n//       getTasks(token)\r\n//         .then(data => setTasks(data))\r\n//         .catch(console.error);\r\n//     } else if (view === 'ideas') {\r\n//       getIdeas(token)\r\n//         .then(data => setIdeas(data))\r\n//         .catch(console.error);\r\n//     }\r\n//   }, [token, view]);\r\n\r\n//   // Gestion login réussie : stocker token, passer à la plateforme\r\n//   function handleLogin(newToken) {\r\n//     localStorage.setItem('token', newToken);\r\n//     setToken(newToken);\r\n//     setPage('platform');  // on passe à la plateforme après login\r\n//   }\r\n\r\n//   // Gestion logout : supprimer token, revenir au login\r\n//   function handleLogout() {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setPage('login');  // revenir à la page login\r\n//   }\r\n\r\n//   // Affichage conditionnel selon page\r\n//   if (page === 'login') {\r\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n//   }\r\n\r\n//   if (page === 'register') {\r\n//     return <Register goToLogin={() => setPage('login')} />;\r\n//   }\r\n\r\n//   // Page plateforme principale (tasks + ideas)\r\n//   return (\r\n//     <div>\r\n//       <Navbar setView={setView} handleLogout={handleLogout} />\r\n//       {view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n//       {view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { getTasks, getIdeas } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login');\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n//     const fetchedIdeas = await getIdeas(jwt);\r\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Rafraîchir les données quand on change de vue\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n//     }\r\n//     if (view === 'ideas') {\r\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const express = require('express');\r\n// const app = express();\r\n// const cors = require('cors');\r\n// const bodyParser = require('body-parser');\r\n// const jwt = require('jsonwebtoken');\r\n\r\n// const SECRET = 'ton_secret_jwt';\r\n// const users = []; // stockage en mémoire (à remplacer par une vraie BDD)\r\n// let tasks = [];\r\n// let ideas = [];\r\n\r\n// app.use(cors());\r\n// app.use(bodyParser.json());\r\n\r\n// // --- AUTHENTIFICATION ---\r\n\r\n// // Inscription\r\n// app.post('/api/register', (req, res) => {\r\n//   const { name, email, password } = req.body;\r\n\r\n//   if (!name || !email || !password) {\r\n//     return res.status(400).json({ message: 'Tous les champs sont obligatoires (name, email, password)' });\r\n//   }\r\n\r\n//   if (users.find(u => u.email === email)) {\r\n//     return res.status(400).json({ message: 'Email déjà utilisé' });\r\n//   }\r\n\r\n//   users.push({ name, email, password }); // WARNING: pas de hash ici, à faire en prod !\r\n//   res.json({ message: 'Utilisateur créé avec succès' });\r\n// });\r\n\r\n// // Connexion\r\n// app.post('/api/login', (req, res) => {\r\n//   const { email, password } = req.body;\r\n\r\n//   if (!email || !password) {\r\n//     return res.status(400).json({ message: 'Email et mot de passe sont obligatoires' });\r\n//   }\r\n\r\n//   const user = users.find(u => u.email === email && u.password === password);\r\n//   if (!user) {\r\n//     return res.status(401).json({ message: 'Email ou mot de passe invalide' });\r\n//   }\r\n\r\n//   const token = jwt.sign({ email: user.email, name: user.name }, SECRET, { expiresIn: '1h' });\r\n\r\n//   res.json({ token });\r\n// });\r\n\r\n// // Middleware d'authentification JWT\r\n// function authenticateToken(req, res, next) {\r\n//   const authHeader = req.headers['authorization'];\r\n//   const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\r\n\r\n//   if (!token) return res.status(401).json({ message: 'Token manquant' });\r\n\r\n//   jwt.verify(token, SECRET, (err, user) => {\r\n//     if (err) return res.status(403).json({ message: 'Token invalide' });\r\n//     req.user = user; // payload décodé\r\n//     next();\r\n//   });\r\n// }\r\n\r\n// // --- ROUTES TASKS ---\r\n\r\n// // Récupérer toutes les tâches de l'utilisateur\r\n// app.get('/api/tasks', authenticateToken, (req, res) => {\r\n//   const userEmail = req.user.email;\r\n//   const userTasks = tasks.filter(task => task.owner === userEmail);\r\n//   res.json(userTasks);\r\n// });\r\n\r\n// // Créer une tâche\r\n// app.post('/api/tasks', authenticateToken, (req, res) => {\r\n//   const { title, description, dueDate, status } = req.body;\r\n//   const newTask = {\r\n//     id: tasks.length + 1,\r\n//     title,\r\n//     description,\r\n//     dueDate,\r\n//     status,\r\n//     owner: req.user.email,\r\n//   };\r\n//   tasks.push(newTask);\r\n//   res.status(201).json(newTask);\r\n// });\r\n\r\n// // Modifier une tâche\r\n// app.put('/api/tasks/:id', authenticateToken, (req, res) => {\r\n//   const id = parseInt(req.params.id);\r\n//   const task = tasks.find(t => t.id === id && t.owner === req.user.email);\r\n//   if (!task) return res.status(404).json({ message: 'Tâche non trouvée' });\r\n\r\n//   const { title, description, dueDate, status } = req.body;\r\n//   if (title !== undefined) task.title = title;\r\n//   if (description !== undefined) task.description = description;\r\n//   if (dueDate !== undefined) task.dueDate = dueDate;\r\n//   if (status !== undefined) task.status = status;\r\n\r\n//   res.json(task);\r\n// });\r\n\r\n// // Supprimer une tâche\r\n// app.delete('/api/tasks/:id', authenticateToken, (req, res) => {\r\n//   const id = parseInt(req.params.id);\r\n//   const index = tasks.findIndex(t => t.id === id && t.owner === req.user.email);\r\n//   if (index === -1) return res.status(404).json({ message: 'Tâche non trouvée' });\r\n//   tasks.splice(index, 1);\r\n//   res.json({ message: 'Tâche supprimée' });\r\n// });\r\n\r\n// // --- ROUTES IDEAS ---\r\n\r\n// // Récupérer toutes les idées de l'utilisateur\r\n// app.get('/api/ideas', authenticateToken, (req, res) => {\r\n//   const userEmail = req.user.email;\r\n//   const userIdeas = ideas.filter(idea => idea.owner === userEmail);\r\n//   res.json(userIdeas);\r\n// });\r\n\r\n// // Créer une idée\r\n// app.post('/api/ideas', authenticateToken, (req, res) => {\r\n//   const { title, description } = req.body;\r\n//   const newIdea = {\r\n//     id: ideas.length + 1,\r\n//     title,\r\n//     description,\r\n//     owner: req.user.email,\r\n//   };\r\n//   ideas.push(newIdea);\r\n//   res.status(201).json(newIdea);\r\n// });\r\n\r\n// // Modifier une idée\r\n// app.put('/api/ideas/:id', authenticateToken, (req, res) => {\r\n//   const id = parseInt(req.params.id);\r\n//   const idea = ideas.find(i => i.id === id && i.owner === req.user.email);\r\n//   if (!idea) return res.status(404).json({ message: 'Idée non trouvée' });\r\n\r\n//   const { title, description } = req.body;\r\n//   if (title !== undefined) idea.title = title;\r\n//   if (description !== undefined) idea.description = description;\r\n\r\n//   res.json(idea);\r\n// });\r\n\r\n// // Supprimer une idée\r\n// app.delete('/api/ideas/:id', authenticateToken, (req, res) => {\r\n//   const id = parseInt(req.params.id);\r\n//   const index = ideas.findIndex(i => i.id === id && i.owner === req.user.email);\r\n//   if (index === -1) return res.status(404).json({ message: 'Idée non trouvée' });\r\n//   ideas.splice(index, 1);\r\n//   res.json({ message: 'Idée supprimée' });\r\n// });\r\n\r\n// // Démarrage du serveur\r\n// const PORT = process.env.PORT || 5000;\r\n// app.listen(PORT, () => {\r\n//   console.log(`Serveur démarré sur le port ${PORT}`);\r\n// });\r\nimport React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskList from './components/TaskList';\r\nimport IdeaForm from './components/IdeaForm';\r\nimport IdeaTable from './components/IdeaTable';\r\nimport { getTasks, getIdeas } from './services/api';\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [page, setPage] = useState(token ? 'platform' : 'login'); // login | register | platform\r\n  const [view, setView] = useState('tasks'); // 'tasks' ou 'ideas'\r\n\r\n  const [tasks, setTasks] = useState([]);\r\n  const [ideas, setIdeas] = useState([]);\r\n\r\n  // Charger les données quand token ou view change\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    if (view === 'tasks') {\r\n      getTasks(token)\r\n        .then(data => setTasks(Array.isArray(data) ? data : []))\r\n        .catch(console.error);\r\n    } else if (view === 'ideas') {\r\n      getIdeas(token)\r\n        .then(data => setIdeas(Array.isArray(data) ? data : []))\r\n        .catch(console.error);\r\n    }\r\n  }, [token, view]);\r\n\r\n  // Après login\r\n  const handleLogin = (newToken) => {\r\n    localStorage.setItem('token', newToken);\r\n    setToken(newToken);\r\n    setPage('platform');\r\n  };\r\n\r\n  // Après logout\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken('');\r\n    setTasks([]);\r\n    setIdeas([]);\r\n    setPage('login');\r\n  };\r\n\r\n  if (page === 'login') {\r\n    return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n  }\r\n\r\n  if (page === 'register') {\r\n    return <Register goToLogin={() => setPage('login')} />;\r\n  }\r\n\r\n  // Page principale\r\n  return (\r\n    <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n      <header style={{ marginBottom: 20 }}>\r\n        <button onClick={() => setView('tasks')} disabled={view === 'tasks'}>\r\n          Tâches\r\n        </button>\r\n        <button onClick={() => setView('ideas')} disabled={view === 'ideas'} style={{ marginLeft: 10 }}>\r\n          Idées\r\n        </button>\r\n        <button onClick={handleLogout} style={{ float: 'right' }}>\r\n          Déconnexion\r\n        </button>\r\n      </header>\r\n\r\n      {view === 'tasks' && (\r\n        <>\r\n          <TaskForm token={token} onTaskAdded={newTask => setTasks([...tasks, newTask])} />\r\n          <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n        </>\r\n      )}\r\n\r\n      {view === 'ideas' && (\r\n        <>\r\n          <IdeaForm token={token} onIdeaAdded={newIdea => setIdeas([...ideas, newIdea])} />\r\n          <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAACkB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACvE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAACgB,KAAK,GAAG,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC;EAChE,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE3C,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,KAAK,EAAE;IAEZ,IAAIM,IAAI,KAAK,OAAO,EAAE;MACpBd,QAAQ,CAACQ,KAAK,CAAC,CACZY,IAAI,CAACC,IAAI,IAAIJ,QAAQ,CAACK,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC,CAAC,CACvDG,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;IACzB,CAAC,MAAM,IAAIZ,IAAI,KAAK,OAAO,EAAE;MAC3Bb,QAAQ,CAACO,KAAK,CAAC,CACZY,IAAI,CAACC,IAAI,IAAIF,QAAQ,CAACG,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC,CAAC,CACvDG,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,CAAClB,KAAK,EAAEM,IAAI,CAAC,CAAC;;EAEjB;EACA,MAAMa,WAAW,GAAIC,QAAQ,IAAK;IAChClB,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;IACvCnB,QAAQ,CAACmB,QAAQ,CAAC;IAClBf,OAAO,CAAC,UAAU,CAAC;EACrB,CAAC;;EAED;EACA,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzBpB,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;IAChCtB,QAAQ,CAAC,EAAE,CAAC;IACZQ,QAAQ,CAAC,EAAE,CAAC;IACZE,QAAQ,CAAC,EAAE,CAAC;IACZN,OAAO,CAAC,OAAO,CAAC;EAClB,CAAC;EAED,IAAID,IAAI,KAAK,OAAO,EAAE;IACpB,oBAAOT,OAAA,CAACT,KAAK;MAACsC,OAAO,EAAEL,WAAY;MAACM,YAAY,EAAEA,CAAA,KAAMpB,OAAO,CAAC,UAAU;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjF;EAEA,IAAIzB,IAAI,KAAK,UAAU,EAAE;IACvB,oBAAOT,OAAA,CAACR,QAAQ;MAAC2C,SAAS,EAAEA,CAAA,KAAMzB,OAAO,CAAC,OAAO;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACxD;;EAEA;EACA,oBACElC,OAAA;IAAKoC,KAAK,EAAE;MAAEC,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBACzDxC,OAAA;MAAQoC,KAAK,EAAE;QAAEK,YAAY,EAAE;MAAG,CAAE;MAAAD,QAAA,gBAClCxC,OAAA;QAAQ0C,OAAO,EAAEA,CAAA,KAAM9B,OAAO,CAAC,OAAO,CAAE;QAAC+B,QAAQ,EAAEhC,IAAI,KAAK,OAAQ;QAAA6B,QAAA,EAAC;MAErE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlC,OAAA;QAAQ0C,OAAO,EAAEA,CAAA,KAAM9B,OAAO,CAAC,OAAO,CAAE;QAAC+B,QAAQ,EAAEhC,IAAI,KAAK,OAAQ;QAACyB,KAAK,EAAE;UAAEQ,UAAU,EAAE;QAAG,CAAE;QAAAJ,QAAA,EAAC;MAEhG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlC,OAAA;QAAQ0C,OAAO,EAAEf,YAAa;QAACS,KAAK,EAAE;UAAES,KAAK,EAAE;QAAQ,CAAE;QAAAL,QAAA,EAAC;MAE1D;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAERvB,IAAI,KAAK,OAAO,iBACfX,OAAA,CAAAE,SAAA;MAAAsC,QAAA,gBACExC,OAAA,CAACP,QAAQ;QAACY,KAAK,EAAEA,KAAM;QAACyC,WAAW,EAAEC,OAAO,IAAIjC,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEkC,OAAO,CAAC;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjFlC,OAAA,CAACN,QAAQ;QAACW,KAAK,EAAEA,KAAM;QAACQ,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA;MAAS;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC5D,CACH,EAEAvB,IAAI,KAAK,OAAO,iBACfX,OAAA,CAAAE,SAAA;MAAAsC,QAAA,gBACExC,OAAA,CAACL,QAAQ;QAACU,KAAK,EAAEA,KAAM;QAAC2C,WAAW,EAAEC,OAAO,IAAIjC,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEkC,OAAO,CAAC;MAAE;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjFlC,OAAA,CAACJ,SAAS;QAACS,KAAK,EAAEA,KAAM;QAACU,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA;MAAS;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC7D,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9B,EAAA,CA7EuBD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     // Fetch tasks after login\n//     const { getTasks } = await import('./services/api');\n//     const fetched = await getTasks(jwt);\n//     setTasks(Array.isArray(fetched) ? fetched : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setView('login');\n//   };\n\n//   // Listen for taskAdded event to refresh tasks\n//   React.useEffect(() => {\n//     if (!token || view !== 'tasks') return;\n//     const { getTasks } = require('./services/api');\n//     const fetchTasks = async () => {\n//       const fetched = await getTasks(token);\n//       setTasks(Array.isArray(fetched) ? fetched : []);\n//     };\n//     fetchTasks();\n//     const handler = () => fetchTasks();\n//     window.addEventListener('taskAdded', handler);\n//     return () => window.removeEventListener('taskAdded', handler);\n//   }, [token, view]);\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\n//       {!token && view === 'login' && (\n//         <>\n//           <Login onLogin={handleLogin} />\n//           <p>\n//             Pas de compte ?{' '}\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {!token && view === 'register' && (\n//         <>\n//           <Register onRegister={() => setView('login')} />\n//           <p>\n//             Déjà un compte ?{' '}\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <button onClick={handleLogout}>Déconnexion</button>\n//           <TaskForm token={token} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// // import React, { useState, useEffect } from 'react';\n// // import Navbar from './components/Navbar';\n// // import Login from './components/Login';\n// // import Register from './components/Register';\n// // import TaskForm from './components/TaskForm';\n// // import TaskList from './components/TaskList';\n// // import IdeaForm from './components/IdeaForm';\n// // import IdeaTable from './components/IdeaTable';\n// // import { getTasks, getIdeas } from './services/api';\n\n// // export default function App() {\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\n// //   const [view, setView] = useState('login');\n// //   const [tasks, setTasks] = useState([]);\n// //   const [ideas, setIdeas] = useState([]);\n\n// //   const handleLogin = async (jwt) => {\n// //     localStorage.setItem('token', jwt);\n// //     setToken(jwt);\n// //     setView('tasks');\n\n// //     const fetchedTasks = await getTasks(jwt);\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n// //     const fetchedIdeas = await getIdeas(jwt);\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem('token');\n// //     setToken('');\n// //     setTasks([]);\n// //     setIdeas([]);\n// //     setView('login');\n// //   };\n\n// //   // Rafraîchir les données quand on change de vue\n// //   useEffect(() => {\n// //     if (!token) return;\n// //     if (view === 'tasks') {\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n// //     }\n// //     if (view === 'ideas') {\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n// //     }\n// //   }, [view, token]);\n\n// //   return (\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n// //       {token && view === 'tasks' && (\n// //         <>\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n// //         </>\n// //       )}\n\n// //       {token && view === 'ideas' && (\n// //         <>\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n// //         </>\n// //       )}\n// //     </div>\n// //   );\n// // }\n// --------------------------------------------\n// import React, { useState, useEffect } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Navbar from './components/Navbar';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\n\n// export default function App() {\n//   // Récupérer token en localStorage si présent\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   // Définir la page active selon si token existe ou pas\n//   // Si token, plateforme; sinon login par défaut\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\n\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   // Charger les données à chaque changement de token ou view\n//   useEffect(() => {\n//     if (!token) return;\n\n//     if (view === 'tasks') {\n//       getTasks(token)\n//         .then(data => setTasks(data))\n//         .catch(console.error);\n//     } else if (view === 'ideas') {\n//       getIdeas(token)\n//         .then(data => setIdeas(data))\n//         .catch(console.error);\n//     }\n//   }, [token, view]);\n\n//   // Gestion login réussie : stocker token, passer à la plateforme\n//   function handleLogin(newToken) {\n//     localStorage.setItem('token', newToken);\n//     setToken(newToken);\n//     setPage('platform');  // on passe à la plateforme après login\n//   }\n\n//   // Gestion logout : supprimer token, revenir au login\n//   function handleLogout() {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setPage('login');  // revenir à la page login\n//   }\n\n//   // Affichage conditionnel selon page\n//   if (page === 'login') {\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\n//   }\n\n//   if (page === 'register') {\n//     return <Register goToLogin={() => setPage('login')} />;\n//   }\n\n//   // Page plateforme principale (tasks + ideas)\n//   return (\n//     <div>\n//       <Navbar setView={setView} handleLogout={handleLogout} />\n//       {view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n//       {view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { getTasks, getIdeas } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login');\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n//     const fetchedIdeas = await getIdeas(jwt);\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setView('login');\n//   };\n\n//   // Rafraîchir les données quand on change de vue\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n//     }\n//     if (view === 'ideas') {\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n//     }\n//   }, [view, token]);\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n\n//       {token && view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\nconst express = require('express');\nconst app = express();\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\nconst SECRET = 'ton_secret_jwt';\nconst users = []; // stockage en mémoire (à remplacer par une vraie BDD)\nlet tasks = [];\nlet ideas = [];\napp.use(cors());\napp.use(bodyParser.json());\n\n// --- AUTHENTIFICATION ---\n\n// Inscription\napp.post('/api/register', (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  if (!name || !email || !password) {\n    return res.status(400).json({\n      message: 'Tous les champs sont obligatoires (name, email, password)'\n    });\n  }\n  if (users.find(u => u.email === email)) {\n    return res.status(400).json({\n      message: 'Email déjà utilisé'\n    });\n  }\n  users.push({\n    name,\n    email,\n    password\n  }); // WARNING: pas de hash ici, à faire en prod !\n  res.json({\n    message: 'Utilisateur créé avec succès'\n  });\n});\n\n// Connexion\napp.post('/api/login', (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      message: 'Email et mot de passe sont obligatoires'\n    });\n  }\n  const user = users.find(u => u.email === email && u.password === password);\n  if (!user) {\n    return res.status(401).json({\n      message: 'Email ou mot de passe invalide'\n    });\n  }\n  const token = jwt.sign({\n    email: user.email,\n    name: user.name\n  }, SECRET, {\n    expiresIn: '1h'\n  });\n  res.json({\n    token\n  });\n});\n\n// Middleware d'authentification JWT\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) return res.status(401).json({\n    message: 'Token manquant'\n  });\n  jwt.verify(token, SECRET, (err, user) => {\n    if (err) return res.status(403).json({\n      message: 'Token invalide'\n    });\n    req.user = user; // payload décodé\n    next();\n  });\n}\n\n// --- ROUTES TASKS ---\n\n// Récupérer toutes les tâches de l'utilisateur\napp.get('/api/tasks', authenticateToken, (req, res) => {\n  const userEmail = req.user.email;\n  const userTasks = tasks.filter(task => task.owner === userEmail);\n  res.json(userTasks);\n});\n\n// Créer une tâche\napp.post('/api/tasks', authenticateToken, (req, res) => {\n  const {\n    title,\n    description,\n    dueDate,\n    status\n  } = req.body;\n  const newTask = {\n    id: tasks.length + 1,\n    title,\n    description,\n    dueDate,\n    status,\n    owner: req.user.email\n  };\n  tasks.push(newTask);\n  res.status(201).json(newTask);\n});\n\n// Modifier une tâche\napp.put('/api/tasks/:id', authenticateToken, (req, res) => {\n  const id = parseInt(req.params.id);\n  const task = tasks.find(t => t.id === id && t.owner === req.user.email);\n  if (!task) return res.status(404).json({\n    message: 'Tâche non trouvée'\n  });\n  const {\n    title,\n    description,\n    dueDate,\n    status\n  } = req.body;\n  if (title !== undefined) task.title = title;\n  if (description !== undefined) task.description = description;\n  if (dueDate !== undefined) task.dueDate = dueDate;\n  if (status !== undefined) task.status = status;\n  res.json(task);\n});\n\n// Supprimer une tâche\napp.delete('/api/tasks/:id', authenticateToken, (req, res) => {\n  const id = parseInt(req.params.id);\n  const index = tasks.findIndex(t => t.id === id && t.owner === req.user.email);\n  if (index === -1) return res.status(404).json({\n    message: 'Tâche non trouvée'\n  });\n  tasks.splice(index, 1);\n  res.json({\n    message: 'Tâche supprimée'\n  });\n});\n\n// --- ROUTES IDEAS ---\n\n// Récupérer toutes les idées de l'utilisateur\napp.get('/api/ideas', authenticateToken, (req, res) => {\n  const userEmail = req.user.email;\n  const userIdeas = ideas.filter(idea => idea.owner === userEmail);\n  res.json(userIdeas);\n});\n\n// Créer une idée\napp.post('/api/ideas', authenticateToken, (req, res) => {\n  const {\n    title,\n    description\n  } = req.body;\n  const newIdea = {\n    id: ideas.length + 1,\n    title,\n    description,\n    owner: req.user.email\n  };\n  ideas.push(newIdea);\n  res.status(201).json(newIdea);\n});\n\n// Modifier une idée\napp.put('/api/ideas/:id', authenticateToken, (req, res) => {\n  const id = parseInt(req.params.id);\n  const idea = ideas.find(i => i.id === id && i.owner === req.user.email);\n  if (!idea) return res.status(404).json({\n    message: 'Idée non trouvée'\n  });\n  const {\n    title,\n    description\n  } = req.body;\n  if (title !== undefined) idea.title = title;\n  if (description !== undefined) idea.description = description;\n  res.json(idea);\n});\n\n// Supprimer une idée\napp.delete('/api/ideas/:id', authenticateToken, (req, res) => {\n  const id = parseInt(req.params.id);\n  const index = ideas.findIndex(i => i.id === id && i.owner === req.user.email);\n  if (index === -1) return res.status(404).json({\n    message: 'Idée non trouvée'\n  });\n  ideas.splice(index, 1);\n  res.json({\n    message: 'Idée supprimée'\n  });\n});\n\n// Démarrage du serveur\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Serveur démarré sur le port ${PORT}`);\n});","map":{"version":3,"names":["express","require","app","cors","bodyParser","jwt","SECRET","users","tasks","ideas","use","json","post","req","res","name","email","password","body","status","message","find","u","push","user","token","sign","expiresIn","authenticateToken","next","authHeader","headers","split","verify","err","get","userEmail","userTasks","filter","task","owner","title","description","dueDate","newTask","id","length","put","parseInt","params","t","undefined","delete","index","findIndex","splice","userIdeas","idea","newIdea","i","PORT","process","env","listen","console","log"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     // Fetch tasks after login\r\n//     const { getTasks } = await import('./services/api');\r\n//     const fetched = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetched) ? fetched : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Listen for taskAdded event to refresh tasks\r\n//   React.useEffect(() => {\r\n//     if (!token || view !== 'tasks') return;\r\n//     const { getTasks } = require('./services/api');\r\n//     const fetchTasks = async () => {\r\n//       const fetched = await getTasks(token);\r\n//       setTasks(Array.isArray(fetched) ? fetched : []);\r\n//     };\r\n//     fetchTasks();\r\n//     const handler = () => fetchTasks();\r\n//     window.addEventListener('taskAdded', handler);\r\n//     return () => window.removeEventListener('taskAdded', handler);\r\n//   }, [token, view]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n//       {!token && view === 'login' && (\r\n//         <>\r\n//           <Login onLogin={handleLogin} />\r\n//           <p>\r\n//             Pas de compte ?{' '}\r\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {!token && view === 'register' && (\r\n//         <>\r\n//           <Register onRegister={() => setView('login')} />\r\n//           <p>\r\n//             Déjà un compte ?{' '}\r\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <button onClick={handleLogout}>Déconnexion</button>\r\n//           <TaskForm token={token} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import Navbar from './components/Navbar';\r\n// // import Login from './components/Login';\r\n// // import Register from './components/Register';\r\n// // import TaskForm from './components/TaskForm';\r\n// // import TaskList from './components/TaskList';\r\n// // import IdeaForm from './components/IdeaForm';\r\n// // import IdeaTable from './components/IdeaTable';\r\n// // import { getTasks, getIdeas } from './services/api';\r\n\r\n// // export default function App() {\r\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n// //   const [view, setView] = useState('login');\r\n// //   const [tasks, setTasks] = useState([]);\r\n// //   const [ideas, setIdeas] = useState([]);\r\n\r\n// //   const handleLogin = async (jwt) => {\r\n// //     localStorage.setItem('token', jwt);\r\n// //     setToken(jwt);\r\n// //     setView('tasks');\r\n\r\n// //     const fetchedTasks = await getTasks(jwt);\r\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n// //     const fetchedIdeas = await getIdeas(jwt);\r\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setToken('');\r\n// //     setTasks([]);\r\n// //     setIdeas([]);\r\n// //     setView('login');\r\n// //   };\r\n\r\n// //   // Rafraîchir les données quand on change de vue\r\n// //   useEffect(() => {\r\n// //     if (!token) return;\r\n// //     if (view === 'tasks') {\r\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //     if (view === 'ideas') {\r\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //   }, [view, token]);\r\n\r\n// //   return (\r\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n// //       {token && view === 'tasks' && (\r\n// //         <>\r\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {token && view === 'ideas' && (\r\n// //         <>\r\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n// //         </>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n// --------------------------------------------\r\n// import React, { useState, useEffect } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import Navbar from './components/Navbar';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\r\n\r\n// export default function App() {\r\n//   // Récupérer token en localStorage si présent\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  \r\n//   // Définir la page active selon si token existe ou pas\r\n//   // Si token, plateforme; sinon login par défaut\r\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\r\n  \r\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   // Charger les données à chaque changement de token ou view\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     if (view === 'tasks') {\r\n//       getTasks(token)\r\n//         .then(data => setTasks(data))\r\n//         .catch(console.error);\r\n//     } else if (view === 'ideas') {\r\n//       getIdeas(token)\r\n//         .then(data => setIdeas(data))\r\n//         .catch(console.error);\r\n//     }\r\n//   }, [token, view]);\r\n\r\n//   // Gestion login réussie : stocker token, passer à la plateforme\r\n//   function handleLogin(newToken) {\r\n//     localStorage.setItem('token', newToken);\r\n//     setToken(newToken);\r\n//     setPage('platform');  // on passe à la plateforme après login\r\n//   }\r\n\r\n//   // Gestion logout : supprimer token, revenir au login\r\n//   function handleLogout() {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setPage('login');  // revenir à la page login\r\n//   }\r\n\r\n//   // Affichage conditionnel selon page\r\n//   if (page === 'login') {\r\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n//   }\r\n\r\n//   if (page === 'register') {\r\n//     return <Register goToLogin={() => setPage('login')} />;\r\n//   }\r\n\r\n//   // Page plateforme principale (tasks + ideas)\r\n//   return (\r\n//     <div>\r\n//       <Navbar setView={setView} handleLogout={handleLogout} />\r\n//       {view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n//       {view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { getTasks, getIdeas } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login');\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n//     const fetchedIdeas = await getIdeas(jwt);\r\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Rafraîchir les données quand on change de vue\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n//     }\r\n//     if (view === 'ideas') {\r\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\nconst express = require('express');\r\nconst app = express();\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst SECRET = 'ton_secret_jwt';\r\nconst users = []; // stockage en mémoire (à remplacer par une vraie BDD)\r\nlet tasks = [];\r\nlet ideas = [];\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// --- AUTHENTIFICATION ---\r\n\r\n// Inscription\r\napp.post('/api/register', (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  if (!name || !email || !password) {\r\n    return res.status(400).json({ message: 'Tous les champs sont obligatoires (name, email, password)' });\r\n  }\r\n\r\n  if (users.find(u => u.email === email)) {\r\n    return res.status(400).json({ message: 'Email déjà utilisé' });\r\n  }\r\n\r\n  users.push({ name, email, password }); // WARNING: pas de hash ici, à faire en prod !\r\n  res.json({ message: 'Utilisateur créé avec succès' });\r\n});\r\n\r\n// Connexion\r\napp.post('/api/login', (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ message: 'Email et mot de passe sont obligatoires' });\r\n  }\r\n\r\n  const user = users.find(u => u.email === email && u.password === password);\r\n  if (!user) {\r\n    return res.status(401).json({ message: 'Email ou mot de passe invalide' });\r\n  }\r\n\r\n  const token = jwt.sign({ email: user.email, name: user.name }, SECRET, { expiresIn: '1h' });\r\n\r\n  res.json({ token });\r\n});\r\n\r\n// Middleware d'authentification JWT\r\nfunction authenticateToken(req, res, next) {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\r\n\r\n  if (!token) return res.status(401).json({ message: 'Token manquant' });\r\n\r\n  jwt.verify(token, SECRET, (err, user) => {\r\n    if (err) return res.status(403).json({ message: 'Token invalide' });\r\n    req.user = user; // payload décodé\r\n    next();\r\n  });\r\n}\r\n\r\n// --- ROUTES TASKS ---\r\n\r\n// Récupérer toutes les tâches de l'utilisateur\r\napp.get('/api/tasks', authenticateToken, (req, res) => {\r\n  const userEmail = req.user.email;\r\n  const userTasks = tasks.filter(task => task.owner === userEmail);\r\n  res.json(userTasks);\r\n});\r\n\r\n// Créer une tâche\r\napp.post('/api/tasks', authenticateToken, (req, res) => {\r\n  const { title, description, dueDate, status } = req.body;\r\n  const newTask = {\r\n    id: tasks.length + 1,\r\n    title,\r\n    description,\r\n    dueDate,\r\n    status,\r\n    owner: req.user.email,\r\n  };\r\n  tasks.push(newTask);\r\n  res.status(201).json(newTask);\r\n});\r\n\r\n// Modifier une tâche\r\napp.put('/api/tasks/:id', authenticateToken, (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const task = tasks.find(t => t.id === id && t.owner === req.user.email);\r\n  if (!task) return res.status(404).json({ message: 'Tâche non trouvée' });\r\n\r\n  const { title, description, dueDate, status } = req.body;\r\n  if (title !== undefined) task.title = title;\r\n  if (description !== undefined) task.description = description;\r\n  if (dueDate !== undefined) task.dueDate = dueDate;\r\n  if (status !== undefined) task.status = status;\r\n\r\n  res.json(task);\r\n});\r\n\r\n// Supprimer une tâche\r\napp.delete('/api/tasks/:id', authenticateToken, (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const index = tasks.findIndex(t => t.id === id && t.owner === req.user.email);\r\n  if (index === -1) return res.status(404).json({ message: 'Tâche non trouvée' });\r\n  tasks.splice(index, 1);\r\n  res.json({ message: 'Tâche supprimée' });\r\n});\r\n\r\n// --- ROUTES IDEAS ---\r\n\r\n// Récupérer toutes les idées de l'utilisateur\r\napp.get('/api/ideas', authenticateToken, (req, res) => {\r\n  const userEmail = req.user.email;\r\n  const userIdeas = ideas.filter(idea => idea.owner === userEmail);\r\n  res.json(userIdeas);\r\n});\r\n\r\n// Créer une idée\r\napp.post('/api/ideas', authenticateToken, (req, res) => {\r\n  const { title, description } = req.body;\r\n  const newIdea = {\r\n    id: ideas.length + 1,\r\n    title,\r\n    description,\r\n    owner: req.user.email,\r\n  };\r\n  ideas.push(newIdea);\r\n  res.status(201).json(newIdea);\r\n});\r\n\r\n// Modifier une idée\r\napp.put('/api/ideas/:id', authenticateToken, (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const idea = ideas.find(i => i.id === id && i.owner === req.user.email);\r\n  if (!idea) return res.status(404).json({ message: 'Idée non trouvée' });\r\n\r\n  const { title, description } = req.body;\r\n  if (title !== undefined) idea.title = title;\r\n  if (description !== undefined) idea.description = description;\r\n\r\n  res.json(idea);\r\n});\r\n\r\n// Supprimer une idée\r\napp.delete('/api/ideas/:id', authenticateToken, (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const index = ideas.findIndex(i => i.id === id && i.owner === req.user.email);\r\n  if (index === -1) return res.status(404).json({ message: 'Idée non trouvée' });\r\n  ideas.splice(index, 1);\r\n  res.json({ message: 'Idée supprimée' });\r\n});\r\n\r\n// Démarrage du serveur\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Serveur démarré sur le port ${PORT}`);\r\n});\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
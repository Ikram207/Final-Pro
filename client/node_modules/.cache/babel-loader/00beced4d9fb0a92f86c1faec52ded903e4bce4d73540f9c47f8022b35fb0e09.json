{"ast":null,"code":"// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\n\n// // Enregistrement utilisateur\n// export async function register(name, email, password) {\n//   const res = await fetch(`${API_URL}/users/register`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ name, email, password }),\n//   });\n//   return res.json();\n// }\n\n// // Connexion utilisateur\n// export async function login(email, password) {\n//   const res = await fetch(`${API_URL}/users/login`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ email, password }),\n//   });\n//   return res.json();\n// }\n\n// // Création d’une tâche\n// export async function createTask(token, taskData) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     method: 'POST',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(taskData),\n//   });\n//   return res.json();\n// }\n\n// // Récupérer la liste des tâches\n// export async function getTasks(token) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // Modifier une tâche\n// export async function updateTask(token, id, updatedData) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'PUT',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(updatedData),\n//   });\n//   return res.json();\n// }\n\n// // Supprimer une tâche\n// export async function deleteTask(token, id) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'DELETE',\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\n\n// // ----------- Utilisateurs -----------\n\n// // Enregistrement utilisateur\n// export async function register(name, email, password) {\n//   const res = await fetch(`${API_URL}/users/register`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ name, email, password }),\n//   });\n//   return res.json();\n// }\n\n// // Connexion utilisateur\n// export async function login(email, password) {\n//   const res = await fetch(`${API_URL}/users/login`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ email, password }),\n//   });\n//   return res.json();\n// }\n\n// // ----------- Tâches -----------\n\n// // Création d’une tâche\n// export async function createTask(token, taskData) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     method: 'POST',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(taskData),\n//   });\n//   return res.json();\n// }\n\n// // Récupérer la liste des tâches\n// export async function getTasks(token) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // Modifier une tâche\n// export async function updateTask(token, id, updatedData) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'PUT',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(updatedData),\n//   });\n//   return res.json();\n// }\n\n// // Supprimer une tâche\n// export async function deleteTask(token, id) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'DELETE',\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // ----------- Idées -----------\n\n// // Créer une idée\n// export async function createIdea(token, ideaData) {\n//   const res = await fetch(`${API_URL}/ideas`, {\n//     method: 'POST',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(ideaData),\n//   });\n//   return res.json();\n// }\n\n// // Récupérer toutes les idées\n// export async function getIdeas(token) {\n//   const res = await fetch(`${API_URL}/ideas`, {\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // Modifier une idée\n// export async function updateIdea(token, id, updatedData) {\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\n//     method: 'PUT',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(updatedData),\n//   });\n//   return res.json();\n// }\n\n// // Supprimer une idée\n// export async function deleteIdea(token, id) {\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\n//     method: 'DELETE',\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n// services/api.js\n\n// services/api.js\n\nconst BASE_URL = 'http://localhost:4000/api';\n\n// Authentification\nexport async function login(email, password) {\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) throw new Error('Email ou mot de passe invalide');\n  return response.json();\n}\nexport async function register(email, password) {\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) throw new Error('Erreur lors de l\\'inscription');\n  return response.json();\n}\n\n// Tâches\nexport async function getTasks(token) {\n  const response = await fetch(`${BASE_URL}/tasks`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Erreur lors du chargement des tâches');\n  return response.json();\n}\nexport async function createTask(task, token) {\n  const response = await fetch(`${BASE_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(task)\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de la tâche');\n  return response.json();\n}\nexport async function updateTask(id, updatedTask, token) {\n  const response = await fetch(`${BASE_URL}/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(updatedTask)\n  });\n  if (!response.ok) throw new Error('Erreur lors de la mise à jour de la tâche');\n  return response.json();\n}\nexport async function deleteTask(id, token) {\n  const response = await fetch(`${BASE_URL}/tasks/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de la tâche');\n  return response.json();\n}\n\n// Idées\nexport async function getIdeas(token) {\n  const response = await fetch(`${BASE_URL}/ideas`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Erreur lors du chargement des idées');\n  return response.json();\n}\nexport async function createIdea(idea, token) {\n  const response = await fetch(`${BASE_URL}/ideas`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(idea)\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l\\'idée');\n  return response.json();\n}\nexport async function updateIdea(id, updatedIdea, token) {\n  const response = await fetch(`${BASE_URL}/ideas/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(updatedIdea)\n  });\n  if (!response.ok) throw new Error('Erreur lors de la mise à jour de l\\'idée');\n  return response.json();\n}\nexport async function deleteIdea(id, token) {\n  const response = await fetch(`${BASE_URL}/ideas/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l\\'idée');\n  return response.json();\n}","map":{"version":3,"names":["BASE_URL","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","register","getTasks","token","Authorization","createTask","task","updateTask","id","updatedTask","deleteTask","getIdeas","createIdea","idea","updateIdea","updatedIdea","deleteIdea"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/services/api.js"],"sourcesContent":["// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\r\n\r\n// // Enregistrement utilisateur\r\n// export async function register(name, email, password) {\r\n//   const res = await fetch(`${API_URL}/users/register`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ name, email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Connexion utilisateur\r\n// export async function login(email, password) {\r\n//   const res = await fetch(`${API_URL}/users/login`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Création d’une tâche\r\n// export async function createTask(token, taskData) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     method: 'POST',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(taskData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Récupérer la liste des tâches\r\n// export async function getTasks(token) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Modifier une tâche\r\n// export async function updateTask(token, id, updatedData) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'PUT',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(updatedData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Supprimer une tâche\r\n// export async function deleteTask(token, id) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'DELETE',\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\r\n\r\n// // ----------- Utilisateurs -----------\r\n\r\n// // Enregistrement utilisateur\r\n// export async function register(name, email, password) {\r\n//   const res = await fetch(`${API_URL}/users/register`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ name, email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Connexion utilisateur\r\n// export async function login(email, password) {\r\n//   const res = await fetch(`${API_URL}/users/login`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // ----------- Tâches -----------\r\n\r\n// // Création d’une tâche\r\n// export async function createTask(token, taskData) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     method: 'POST',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(taskData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Récupérer la liste des tâches\r\n// export async function getTasks(token) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Modifier une tâche\r\n// export async function updateTask(token, id, updatedData) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'PUT',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(updatedData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Supprimer une tâche\r\n// export async function deleteTask(token, id) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'DELETE',\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // ----------- Idées -----------\r\n\r\n// // Créer une idée\r\n// export async function createIdea(token, ideaData) {\r\n//   const res = await fetch(`${API_URL}/ideas`, {\r\n//     method: 'POST',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(ideaData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Récupérer toutes les idées\r\n// export async function getIdeas(token) {\r\n//   const res = await fetch(`${API_URL}/ideas`, {\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Modifier une idée\r\n// export async function updateIdea(token, id, updatedData) {\r\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n//     method: 'PUT',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(updatedData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Supprimer une idée\r\n// export async function deleteIdea(token, id) {\r\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n//     method: 'DELETE',\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n// services/api.js\r\n\r\n// services/api.js\r\n\r\nconst BASE_URL = 'http://localhost:4000/api';\r\n\r\n// Authentification\r\nexport async function login(email, password) {\r\n  const response = await fetch(`${BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  if (!response.ok) throw new Error('Email ou mot de passe invalide');\r\n  return response.json();\r\n}\r\n\r\nexport async function register(email, password) {\r\n  const response = await fetch(`${BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de l\\'inscription');\r\n  return response.json();\r\n}\r\n\r\n// Tâches\r\nexport async function getTasks(token) {\r\n  const response = await fetch(`${BASE_URL}/tasks`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors du chargement des tâches');\r\n  return response.json();\r\n}\r\n\r\nexport async function createTask(task, token) {\r\n  const response = await fetch(`${BASE_URL}/tasks`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n    body: JSON.stringify(task),\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la création de la tâche');\r\n  return response.json();\r\n}\r\n\r\nexport async function updateTask(id, updatedTask, token) {\r\n  const response = await fetch(`${BASE_URL}/tasks/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n    body: JSON.stringify(updatedTask),\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la mise à jour de la tâche');\r\n  return response.json();\r\n}\r\n\r\nexport async function deleteTask(id, token) {\r\n  const response = await fetch(`${BASE_URL}/tasks/${id}`, {\r\n    method: 'DELETE',\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la suppression de la tâche');\r\n  return response.json();\r\n}\r\n\r\n// Idées\r\nexport async function getIdeas(token) {\r\n  const response = await fetch(`${BASE_URL}/ideas`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors du chargement des idées');\r\n  return response.json();\r\n}\r\n\r\nexport async function createIdea(idea, token) {\r\n  const response = await fetch(`${BASE_URL}/ideas`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n    body: JSON.stringify(idea),\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la création de l\\'idée');\r\n  return response.json();\r\n}\r\n\r\nexport async function updateIdea(id, updatedIdea, token) {\r\n  const response = await fetch(`${BASE_URL}/ideas/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n    body: JSON.stringify(updatedIdea),\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la mise à jour de l\\'idée');\r\n  return response.json();\r\n}\r\n\r\nexport async function deleteIdea(id, token) {\r\n  const response = await fetch(`${BASE_URL}/ideas/${id}`, {\r\n    method: 'DELETE',\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l\\'idée');\r\n  return response.json();\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA,OAAO,eAAeC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,QAAQ,EAAE;IAChDM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnE,OAAOR,QAAQ,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
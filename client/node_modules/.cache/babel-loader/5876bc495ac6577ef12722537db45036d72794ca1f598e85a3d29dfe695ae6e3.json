{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import { getTasks, createTask, updateTask, deleteTask, getIdeas } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n//   const [message, setMessage] = useState(null); // {type: 'error'|'success', text: ''}\n\n//   useEffect(() => {\n//     if (message) {\n//       const timer = setTimeout(() => setMessage(null), 4000);\n//       return () => clearTimeout(timer);\n//     }\n//   }, [message]);\n\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => {\n//         setTasks(Array.isArray(data) ? data : []);\n//       });\n//     }\n//   }, [view, token]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setEditingTask(null);\n//     setView('login');\n//   };\n\n//   const handleSaveTask = async (taskData) => {\n//     if (editingTask) {\n//       const updated = await updateTask(token, editingTask._id, taskData);\n//       if (!updated.error) {\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\n//       }\n//     } else {\n//       const created = await createTask(token, taskData);\n//       if (!created.error) {\n//         setTasks([...tasks, created]);\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\n//       }\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\n\n//     const deleted = await deleteTask(token, taskId);\n//     if (!deleted.error) {\n//       setTasks(tasks.filter(t => t._id !== taskId));\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\n//     } else {\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\n//     }\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {message && (\n//         <div style={{\n//           marginBottom: 10,\n//           padding: 10,\n//           color: message.type === 'error' ? 'red' : 'green',\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\n//           borderRadius: 5,\n//         }}>\n//           {message.text}\n//         </div>\n//       )}\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm\n//             token={token}\n//             onSave={handleSaveTask}\n//             editingTask={editingTask}\n//             cancelEdit={() => setEditingTask(null)}\n//           />\n//           <TaskList\n//             token={token}\n//             tasks={tasks}\n//             setTasks={setTasks}\n//             onEdit={setEditingTask}\n//             onDelete={handleDeleteTask}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n//   const [message, setMessage] = useState(null); // {type: 'error'|'success', text: ''}\n\n//   useEffect(() => {\n//     if (message) {\n//       const timer = setTimeout(() => setMessage(null), 4000);\n//       return () => clearTimeout(timer);\n//     }\n//   }, [message]);\n\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => {\n//         setTasks(Array.isArray(data) ? data : []);\n//       });\n//     }\n//   }, [view, token]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setEditingTask(null);\n//     setView('login');\n//   };\n\n//   const handleSaveTask = async (taskData) => {\n//     if (editingTask) {\n//       const updated = await updateTask(token, editingTask._id, taskData);\n//       if (!updated.error) {\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\n//       }\n//     } else {\n//       const created = await createTask(token, taskData);\n//       console.log('Tâche créée reçue:', created);\n//       if (!created.error) {\n//         setTasks([...tasks, created]);\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\n//       }\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\n\n//     const deleted = await deleteTask(token, taskId);\n//     if (!deleted.error) {\n//       setTasks(tasks.filter(t => t._id !== taskId));\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\n//     } else {\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\n//     }\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {message && (\n//         <div style={{\n//           marginBottom: 10,\n//           padding: 10,\n//           color: message.type === 'error' ? 'red' : 'green',\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\n//           borderRadius: 5,\n//         }}>\n//           {message.text}\n//         </div>\n//       )}\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm\n//             token={token}\n//             onSave={handleSaveTask}\n//             editingTask={editingTask}\n//             cancelEdit={() => setEditingTask(null)}\n//           />\n//           <TaskList\n//             token={token}\n//             tasks={tasks}\n//             setTasks={setTasks}\n//             onEdit={setEditingTask}\n//             onDelete={handleDeleteTask}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState(token ? 'tasks' : 'login');\n//   const [tasks, setTasks] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n//   const [message, setMessage] = useState(null);\n\n//   useEffect(() => {\n//     if (message) {\n//       const timer = setTimeout(() => setMessage(null), 4000);\n//       return () => clearTimeout(timer);\n//     }\n//   }, [message]);\n\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => {\n//         setTasks(Array.isArray(data) ? data : []);\n//       });\n//     }\n//   }, [view, token]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setEditingTask(null);\n//     setView('login');\n//   };\n\n//   const handleSaveTask = async (taskData) => {\n//     if (editingTask) {\n//       const updated = await updateTask(token, editingTask._id, taskData);\n//       if (!updated.error) {\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\n//       }\n//     } else {\n//       const created = await createTask(token, taskData);\n//       console.log('Tâche créée reçue:', created);\n//       if (!created.error) {\n//         setTasks([...tasks, created]);\n//         setEditingTask(null);\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\n//       } else {\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\n//       }\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\n\n//     const deleted = await deleteTask(token, taskId);\n//     if (!deleted.error) {\n//       setTasks(tasks.filter(t => t._id !== taskId));\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\n//     } else {\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\n//     }\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {message && (\n//         <div style={{\n//           marginBottom: 10,\n//           padding: 10,\n//           color: message.type === 'error' ? 'red' : 'green',\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\n//           borderRadius: 5,\n//         }}>\n//           {message.text}\n//         </div>\n//       )}\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm\n//             token={token}\n//             onSave={handleSaveTask}\n//             editingTask={editingTask}\n//             cancelEdit={() => setEditingTask(null)}\n//           />\n//           <TaskList\n//             token={token}\n//             tasks={tasks}\n//             setTasks={setTasks}\n//             onEdit={setEditingTask}\n//             onDelete={handleDeleteTask}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { getTasks, createTask, updateTask, deleteTask } from './services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\n  const [tasks, setTasks] = useState([]);\n  const [editingTask, setEditingTask] = useState(null);\n  const [message, setMessage] = useState(null);\n  useEffect(() => {\n    if (message) {\n      const timer = setTimeout(() => setMessage(null), 4000);\n      return () => clearTimeout(timer);\n    }\n  }, [message]);\n  useEffect(() => {\n    if (!token) return;\n    if (view === 'tasks') {\n      getTasks(token).then(data => {\n        setTasks(Array.isArray(data) ? data : []);\n      });\n    }\n  }, [view, token]);\n  const handleLogin = async jwt => {\n    localStorage.setItem('token', jwt);\n    setToken(jwt);\n    setView('tasks');\n    const fetchedTasks = await getTasks(jwt);\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setTasks([]);\n    setEditingTask(null);\n    setView('login');\n  };\n  const handleSaveTask = async taskData => {\n    if (editingTask) {\n      const updated = await updateTask(token, editingTask._id, taskData);\n      if (!updated.error) {\n        setTasks(tasks.map(t => t._id === updated._id ? updated : t));\n        setEditingTask(null);\n        setMessage({\n          type: 'success',\n          text: 'Tâche mise à jour avec succès !'\n        });\n      } else {\n        setMessage({\n          type: 'error',\n          text: `Erreur mise à jour: ${updated.error}`\n        });\n      }\n    } else {\n      const created = await createTask(token, taskData);\n      if (!created.error) {\n        setTasks([...tasks, created]);\n        setEditingTask(null);\n        setMessage({\n          type: 'success',\n          text: 'Tâche créée avec succès !'\n        });\n      } else {\n        setMessage({\n          type: 'error',\n          text: `Erreur création: ${created.error}`\n        });\n      }\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\n    const deleted = await deleteTask(token, taskId);\n    if (!deleted.error) {\n      setTasks(tasks.filter(t => t._id !== taskId));\n      setMessage({\n        type: 'success',\n        text: 'Tâche supprimée avec succès !'\n      });\n    } else {\n      setMessage({\n        type: 'error',\n        text: `Erreur suppression: ${deleted.error}`\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: 'auto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setView: setView,\n      token: token,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10,\n        padding: 10,\n        color: message.type === 'error' ? 'red' : 'green',\n        border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\n        borderRadius: 5\n      },\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 9\n    }, this), !token && view === 'login' && /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 38\n    }, this), !token && view === 'register' && /*#__PURE__*/_jsxDEV(Register, {\n      onRegister: () => setView('login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 41\n    }, this), token && view === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        token: token,\n        onSave: handleSaveTask,\n        editingTask: editingTask,\n        cancelEdit: () => setEditingTask(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        token: token,\n        tasks: tasks,\n        setTasks: setTasks,\n        onEdit: setEditingTask,\n        onDelete: handleDeleteTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XQ8kXHNInGKwy9MCV5FKw4N1hvY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Login","Register","TaskForm","TaskList","getTasks","createTask","updateTask","deleteTask","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","localStorage","getItem","view","setView","tasks","setTasks","editingTask","setEditingTask","message","setMessage","timer","setTimeout","clearTimeout","then","data","Array","isArray","handleLogin","jwt","setItem","fetchedTasks","handleLogout","removeItem","handleSaveTask","taskData","updated","_id","error","map","t","type","text","created","handleDeleteTask","taskId","window","confirm","deleted","filter","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","color","border","borderRadius","onLogin","onRegister","onSave","cancelEdit","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import { getTasks, createTask, updateTask, deleteTask, getIdeas } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n//   const [message, setMessage] = useState(null); // {type: 'error'|'success', text: ''}\r\n\r\n//   useEffect(() => {\r\n//     if (message) {\r\n//       const timer = setTimeout(() => setMessage(null), 4000);\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//   }, [message]);\r\n\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => {\r\n//         setTasks(Array.isArray(data) ? data : []);\r\n//       });\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setEditingTask(null);\r\n//     setView('login');\r\n//   };\r\n\r\n//   const handleSaveTask = async (taskData) => {\r\n//     if (editingTask) {\r\n//       const updated = await updateTask(token, editingTask._id, taskData);\r\n//       if (!updated.error) {\r\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\r\n//       }\r\n//     } else {\r\n//       const created = await createTask(token, taskData);\r\n//       if (!created.error) {\r\n//         setTasks([...tasks, created]);\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteTask = async (taskId) => {\r\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\r\n\r\n//     const deleted = await deleteTask(token, taskId);\r\n//     if (!deleted.error) {\r\n//       setTasks(tasks.filter(t => t._id !== taskId));\r\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\r\n//     } else {\r\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {message && (\r\n//         <div style={{\r\n//           marginBottom: 10,\r\n//           padding: 10,\r\n//           color: message.type === 'error' ? 'red' : 'green',\r\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\r\n//           borderRadius: 5,\r\n//         }}>\r\n//           {message.text}\r\n//         </div>\r\n//       )}\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm\r\n//             token={token}\r\n//             onSave={handleSaveTask}\r\n//             editingTask={editingTask}\r\n//             cancelEdit={() => setEditingTask(null)}\r\n//           />\r\n//           <TaskList\r\n//             token={token}\r\n//             tasks={tasks}\r\n//             setTasks={setTasks}\r\n//             onEdit={setEditingTask}\r\n//             onDelete={handleDeleteTask}\r\n//           />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n//   const [message, setMessage] = useState(null); // {type: 'error'|'success', text: ''}\r\n\r\n//   useEffect(() => {\r\n//     if (message) {\r\n//       const timer = setTimeout(() => setMessage(null), 4000);\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//   }, [message]);\r\n\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => {\r\n//         setTasks(Array.isArray(data) ? data : []);\r\n//       });\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setEditingTask(null);\r\n//     setView('login');\r\n//   };\r\n\r\n//   const handleSaveTask = async (taskData) => {\r\n//     if (editingTask) {\r\n//       const updated = await updateTask(token, editingTask._id, taskData);\r\n//       if (!updated.error) {\r\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\r\n//       }\r\n//     } else {\r\n//       const created = await createTask(token, taskData);\r\n//       console.log('Tâche créée reçue:', created);\r\n//       if (!created.error) {\r\n//         setTasks([...tasks, created]);\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteTask = async (taskId) => {\r\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\r\n\r\n//     const deleted = await deleteTask(token, taskId);\r\n//     if (!deleted.error) {\r\n//       setTasks(tasks.filter(t => t._id !== taskId));\r\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\r\n//     } else {\r\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {message && (\r\n//         <div style={{\r\n//           marginBottom: 10,\r\n//           padding: 10,\r\n//           color: message.type === 'error' ? 'red' : 'green',\r\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\r\n//           borderRadius: 5,\r\n//         }}>\r\n//           {message.text}\r\n//         </div>\r\n//       )}\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm\r\n//             token={token}\r\n//             onSave={handleSaveTask}\r\n//             editingTask={editingTask}\r\n//             cancelEdit={() => setEditingTask(null)}\r\n//           />\r\n//           <TaskList\r\n//             token={token}\r\n//             tasks={tasks}\r\n//             setTasks={setTasks}\r\n//             onEdit={setEditingTask}\r\n//             onDelete={handleDeleteTask}\r\n//           />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState(token ? 'tasks' : 'login');\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n//   const [message, setMessage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (message) {\r\n//       const timer = setTimeout(() => setMessage(null), 4000);\r\n//       return () => clearTimeout(timer);\r\n//     }\r\n//   }, [message]);\r\n\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => {\r\n//         setTasks(Array.isArray(data) ? data : []);\r\n//       });\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setEditingTask(null);\r\n//     setView('login');\r\n//   };\r\n\r\n//   const handleSaveTask = async (taskData) => {\r\n//     if (editingTask) {\r\n//       const updated = await updateTask(token, editingTask._id, taskData);\r\n//       if (!updated.error) {\r\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\r\n//       }\r\n//     } else {\r\n//       const created = await createTask(token, taskData);\r\n//       console.log('Tâche créée reçue:', created);\r\n//       if (!created.error) {\r\n//         setTasks([...tasks, created]);\r\n//         setEditingTask(null);\r\n//         setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\r\n//       } else {\r\n//         setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteTask = async (taskId) => {\r\n//     if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\r\n\r\n//     const deleted = await deleteTask(token, taskId);\r\n//     if (!deleted.error) {\r\n//       setTasks(tasks.filter(t => t._id !== taskId));\r\n//       setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\r\n//     } else {\r\n//       setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {message && (\r\n//         <div style={{\r\n//           marginBottom: 10,\r\n//           padding: 10,\r\n//           color: message.type === 'error' ? 'red' : 'green',\r\n//           border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\r\n//           borderRadius: 5,\r\n//         }}>\r\n//           {message.text}\r\n//         </div>\r\n//       )}\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm\r\n//             token={token}\r\n//             onSave={handleSaveTask}\r\n//             editingTask={editingTask}\r\n//             cancelEdit={() => setEditingTask(null)}\r\n//           />\r\n//           <TaskList\r\n//             token={token}\r\n//             tasks={tasks}\r\n//             setTasks={setTasks}\r\n//             onEdit={setEditingTask}\r\n//             onDelete={handleDeleteTask}\r\n//           />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskList from './components/TaskList';\r\nimport { getTasks, createTask, updateTask, deleteTask } from './services/api';\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\r\n  const [tasks, setTasks] = useState([]);\r\n  const [editingTask, setEditingTask] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (message) {\r\n      const timer = setTimeout(() => setMessage(null), 4000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [message]);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    if (view === 'tasks') {\r\n      getTasks(token).then(data => {\r\n        setTasks(Array.isArray(data) ? data : []);\r\n      });\r\n    }\r\n  }, [view, token]);\r\n\r\n  const handleLogin = async (jwt) => {\r\n    localStorage.setItem('token', jwt);\r\n    setToken(jwt);\r\n    setView('tasks');\r\n    const fetchedTasks = await getTasks(jwt);\r\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken('');\r\n    setTasks([]);\r\n    setEditingTask(null);\r\n    setView('login');\r\n  };\r\n\r\n  const handleSaveTask = async (taskData) => {\r\n    if (editingTask) {\r\n      const updated = await updateTask(token, editingTask._id, taskData);\r\n      if (!updated.error) {\r\n        setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n        setEditingTask(null);\r\n        setMessage({ type: 'success', text: 'Tâche mise à jour avec succès !' });\r\n      } else {\r\n        setMessage({ type: 'error', text: `Erreur mise à jour: ${updated.error}` });\r\n      }\r\n    } else {\r\n      const created = await createTask(token, taskData);\r\n      if (!created.error) {\r\n        setTasks([...tasks, created]);\r\n        setEditingTask(null);\r\n        setMessage({ type: 'success', text: 'Tâche créée avec succès !' });\r\n      } else {\r\n        setMessage({ type: 'error', text: `Erreur création: ${created.error}` });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteTask = async (taskId) => {\r\n    if (!window.confirm('Voulez-vous vraiment supprimer cette tâche ?')) return;\r\n\r\n    const deleted = await deleteTask(token, taskId);\r\n    if (!deleted.error) {\r\n      setTasks(tasks.filter(t => t._id !== taskId));\r\n      setMessage({ type: 'success', text: 'Tâche supprimée avec succès !' });\r\n    } else {\r\n      setMessage({ type: 'error', text: `Erreur suppression: ${deleted.error}` });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n      <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n      {message && (\r\n        <div style={{\r\n          marginBottom: 10,\r\n          padding: 10,\r\n          color: message.type === 'error' ? 'red' : 'green',\r\n          border: `1px solid ${message.type === 'error' ? 'red' : 'green'}`,\r\n          borderRadius: 5,\r\n        }}>\r\n          {message.text}\r\n        </div>\r\n      )}\r\n\r\n      {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n      {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n      {token && view === 'tasks' && (\r\n        <>\r\n          <TaskForm\r\n            token={token}\r\n            onSave={handleSaveTask}\r\n            editingTask={editingTask}\r\n            cancelEdit={() => setEditingTask(null)}\r\n          />\r\n          <TaskList\r\n            token={token}\r\n            tasks={tasks}\r\n            setTasks={setTasks}\r\n            onEdit={setEditingTask}\r\n            onDelete={handleDeleteTask}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
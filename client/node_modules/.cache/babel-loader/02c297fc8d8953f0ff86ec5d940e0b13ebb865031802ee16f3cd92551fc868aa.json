{"ast":null,"code":"// // const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\n\n// // // Enregistrement utilisateur\n// // export async function register(name, email, password) {\n// //   const res = await fetch(`${API_URL}/users/register`, {\n// //     method: 'POST',\n// //     headers: { 'Content-Type': 'application/json' },\n// //     body: JSON.stringify({ name, email, password }),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Connexion utilisateur\n// // export async function login(email, password) {\n// //   const res = await fetch(`${API_URL}/users/login`, {\n// //     method: 'POST',\n// //     headers: { 'Content-Type': 'application/json' },\n// //     body: JSON.stringify({ email, password }),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Création d’une tâche\n// // export async function createTask(token, taskData) {\n// //   const res = await fetch(`${API_URL}/tasks`, {\n// //     method: 'POST',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(taskData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Récupérer la liste des tâches\n// // export async function getTasks(token) {\n// //   const res = await fetch(`${API_URL}/tasks`, {\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n\n// // // Modifier une tâche\n// // export async function updateTask(token, id, updatedData) {\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\n// //     method: 'PUT',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(updatedData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Supprimer une tâche\n// // export async function deleteTask(token, id) {\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\n// //     method: 'DELETE',\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n// // const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\n\n// // // ----------- Utilisateurs -----------\n\n// // // Enregistrement utilisateur\n// // export async function register(name, email, password) {\n// //   const res = await fetch(`${API_URL}/users/register`, {\n// //     method: 'POST',\n// //     headers: { 'Content-Type': 'application/json' },\n// //     body: JSON.stringify({ name, email, password }),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Connexion utilisateur\n// // export async function login(email, password) {\n// //   const res = await fetch(`${API_URL}/users/login`, {\n// //     method: 'POST',\n// //     headers: { 'Content-Type': 'application/json' },\n// //     body: JSON.stringify({ email, password }),\n// //   });\n// //   return res.json();\n// // }\n\n// // // ----------- Tâches -----------\n\n// // // Création d’une tâche\n// // export async function createTask(token, taskData) {\n// //   const res = await fetch(`${API_URL}/tasks`, {\n// //     method: 'POST',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(taskData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Récupérer la liste des tâches\n// // export async function getTasks(token) {\n// //   const res = await fetch(`${API_URL}/tasks`, {\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n\n// // // Modifier une tâche\n// // export async function updateTask(token, id, updatedData) {\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\n// //     method: 'PUT',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(updatedData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Supprimer une tâche\n// // export async function deleteTask(token, id) {\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\n// //     method: 'DELETE',\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n\n// // // ----------- Idées -----------\n\n// // // Créer une idée\n// // export async function createIdea(token, ideaData) {\n// //   const res = await fetch(`${API_URL}/ideas`, {\n// //     method: 'POST',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(ideaData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Récupérer toutes les idées\n// // export async function getIdeas(token) {\n// //   const res = await fetch(`${API_URL}/ideas`, {\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n\n// // // Modifier une idée\n// // export async function updateIdea(token, id, updatedData) {\n// //   const res = await fetch(`${API_URL}/ideas/${id}`, {\n// //     method: 'PUT',\n// //     headers: { \n// //       'Content-Type': 'application/json',\n// //       Authorization: `Bearer ${token}`,\n// //     },\n// //     body: JSON.stringify(updatedData),\n// //   });\n// //   return res.json();\n// // }\n\n// // // Supprimer une idée\n// // export async function deleteIdea(token, id) {\n// //   const res = await fetch(`${API_URL}/ideas/${id}`, {\n// //     method: 'DELETE',\n// //     headers: { Authorization: `Bearer ${token}` },\n// //   });\n// //   return res.json();\n// // }\n// // services/api.js\n\n// // services/api.js\n\n// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\n\n// // ----------- Utilisateurs -----------\n\n// // Enregistrement utilisateur\n// export async function register(name, email, password) {\n//   const res = await fetch(`${API_URL}/users/register`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ name, email, password }),\n//   });\n//   return res.json();\n// }\n\n// // Connexion utilisateur\n// export async function login(email, password) {\n//   const res = await fetch(`${API_URL}/users/login`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ email, password }),\n//   });\n//   return res.json();\n// }\n\n// // ----------- Tâches -----------\n\n// // Création d’une tâche\n// export async function createTask(token, taskData) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     method: 'POST',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(taskData),\n//   });\n//   return res.json();\n// }\n\n// // Récupérer la liste des tâches\n// export async function getTasks(token) {\n//   const res = await fetch(`${API_URL}/tasks`, {\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // Modifier une tâche\n// export async function updateTask(token, id, updatedData) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'PUT',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(updatedData),\n//   });\n//   return res.json();\n// }\n\n// // Supprimer une tâche\n// export async function deleteTask(token, id) {\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\n//     method: 'DELETE',\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // ----------- Idées -----------\n\n// // Créer une idée\n// export async function createIdea(token, ideaData) {\n//   const res = await fetch(`${API_URL}/ideas`, {\n//     method: 'POST',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(ideaData),\n//   });\n//   return res.json();\n// }\n\n// // Récupérer toutes les idées\n// export async function getIdeas(token) {\n//   const res = await fetch(`${API_URL}/ideas`, {\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\n\n// // Modifier une idée\n// export async function updateIdea(token, id, updatedData) {\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\n//     method: 'PUT',\n//     headers: { \n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(updatedData),\n//   });\n//   return res.json();\n// }\n\n// // Supprimer une idée\n// export async function deleteIdea(token, id) {\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\n//     method: 'DELETE',\n//     headers: { Authorization: `Bearer ${token}` },\n//   });\n//   return res.json();\n// }\nconst API_URL = 'http://localhost:4000/api';\nfunction authHeaders(token) {\n  return {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`\n  };\n}\n\n// Utilisateurs\nexport async function register(name, email, password) {\n  try {\n    const res = await fetch(`${API_URL}/users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('register error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function login(email, password) {\n  try {\n    const res = await fetch(`${API_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('login error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\n\n// Tâches\nexport async function createTask(token, taskData) {\n  try {\n    const res = await fetch(`${API_URL}/tasks`, {\n      method: 'POST',\n      headers: authHeaders(token),\n      body: JSON.stringify(taskData)\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('createTask error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function getTasks(token) {\n  try {\n    const res = await fetch(`${API_URL}/tasks`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    const data = await res.json();\n    console.log('getTasks data:', data);\n    return data;\n  } catch (error) {\n    console.error('getTasks error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function updateTask(token, id, updatedData) {\n  try {\n    const res = await fetch(`${API_URL}/tasks/${id}`, {\n      method: 'PUT',\n      headers: authHeaders(token),\n      body: JSON.stringify(updatedData)\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('updateTask error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function deleteTask(token, id) {\n  try {\n    const res = await fetch(`${API_URL}/tasks/${id}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('deleteTask error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\n\n// Idées (similaire aux tâches)\nexport async function createIdea(token, ideaData) {\n  try {\n    const res = await fetch(`${API_URL}/ideas`, {\n      method: 'POST',\n      headers: authHeaders(token),\n      body: JSON.stringify(ideaData)\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('createIdea error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function getIdeas(token) {\n  try {\n    const res = await fetch(`${API_URL}/ideas`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('getIdeas error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function updateIdea(token, id, updatedData) {\n  try {\n    const res = await fetch(`${API_URL}/ideas/${id}`, {\n      method: 'PUT',\n      headers: authHeaders(token),\n      body: JSON.stringify(updatedData)\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('updateIdea error:', error);\n    return {\n      error: error.message\n    };\n  }\n}\nexport async function deleteIdea(token, id) {\n  try {\n    const res = await fetch(`${API_URL}/ideas/${id}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\n    return await res.json();\n  } catch (error) {\n    console.error('deleteIdea error:', error);\n    return {\n      error: error.message\n    };\n  }\n}","map":{"version":3,"names":["API_URL","authHeaders","token","Authorization","register","name","email","password","res","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","message","login","createTask","taskData","getTasks","data","log","updateTask","id","updatedData","deleteTask","createIdea","ideaData","getIdeas","updateIdea","deleteIdea"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/services/api.js"],"sourcesContent":["// // const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\r\n\r\n// // // Enregistrement utilisateur\r\n// // export async function register(name, email, password) {\r\n// //   const res = await fetch(`${API_URL}/users/register`, {\r\n// //     method: 'POST',\r\n// //     headers: { 'Content-Type': 'application/json' },\r\n// //     body: JSON.stringify({ name, email, password }),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Connexion utilisateur\r\n// // export async function login(email, password) {\r\n// //   const res = await fetch(`${API_URL}/users/login`, {\r\n// //     method: 'POST',\r\n// //     headers: { 'Content-Type': 'application/json' },\r\n// //     body: JSON.stringify({ email, password }),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Création d’une tâche\r\n// // export async function createTask(token, taskData) {\r\n// //   const res = await fetch(`${API_URL}/tasks`, {\r\n// //     method: 'POST',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(taskData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Récupérer la liste des tâches\r\n// // export async function getTasks(token) {\r\n// //   const res = await fetch(`${API_URL}/tasks`, {\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Modifier une tâche\r\n// // export async function updateTask(token, id, updatedData) {\r\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n// //     method: 'PUT',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(updatedData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Supprimer une tâche\r\n// // export async function deleteTask(token, id) {\r\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n// //     method: 'DELETE',\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n// // const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\r\n\r\n// // // ----------- Utilisateurs -----------\r\n\r\n// // // Enregistrement utilisateur\r\n// // export async function register(name, email, password) {\r\n// //   const res = await fetch(`${API_URL}/users/register`, {\r\n// //     method: 'POST',\r\n// //     headers: { 'Content-Type': 'application/json' },\r\n// //     body: JSON.stringify({ name, email, password }),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Connexion utilisateur\r\n// // export async function login(email, password) {\r\n// //   const res = await fetch(`${API_URL}/users/login`, {\r\n// //     method: 'POST',\r\n// //     headers: { 'Content-Type': 'application/json' },\r\n// //     body: JSON.stringify({ email, password }),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // ----------- Tâches -----------\r\n\r\n// // // Création d’une tâche\r\n// // export async function createTask(token, taskData) {\r\n// //   const res = await fetch(`${API_URL}/tasks`, {\r\n// //     method: 'POST',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(taskData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Récupérer la liste des tâches\r\n// // export async function getTasks(token) {\r\n// //   const res = await fetch(`${API_URL}/tasks`, {\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Modifier une tâche\r\n// // export async function updateTask(token, id, updatedData) {\r\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n// //     method: 'PUT',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(updatedData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Supprimer une tâche\r\n// // export async function deleteTask(token, id) {\r\n// //   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n// //     method: 'DELETE',\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // ----------- Idées -----------\r\n\r\n// // // Créer une idée\r\n// // export async function createIdea(token, ideaData) {\r\n// //   const res = await fetch(`${API_URL}/ideas`, {\r\n// //     method: 'POST',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(ideaData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Récupérer toutes les idées\r\n// // export async function getIdeas(token) {\r\n// //   const res = await fetch(`${API_URL}/ideas`, {\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Modifier une idée\r\n// // export async function updateIdea(token, id, updatedData) {\r\n// //   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n// //     method: 'PUT',\r\n// //     headers: { \r\n// //       'Content-Type': 'application/json',\r\n// //       Authorization: `Bearer ${token}`,\r\n// //     },\r\n// //     body: JSON.stringify(updatedData),\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n\r\n// // // Supprimer une idée\r\n// // export async function deleteIdea(token, id) {\r\n// //   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n// //     method: 'DELETE',\r\n// //     headers: { Authorization: `Bearer ${token}` },\r\n// //   });\r\n// //   return res.json();\r\n// // }\r\n// // services/api.js\r\n\r\n// // services/api.js\r\n\r\n// const API_URL = 'http://localhost:4000/api'; // adapte selon l’URL de ton backend\r\n\r\n// // ----------- Utilisateurs -----------\r\n\r\n// // Enregistrement utilisateur\r\n// export async function register(name, email, password) {\r\n//   const res = await fetch(`${API_URL}/users/register`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ name, email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Connexion utilisateur\r\n// export async function login(email, password) {\r\n//   const res = await fetch(`${API_URL}/users/login`, {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({ email, password }),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // ----------- Tâches -----------\r\n\r\n// // Création d’une tâche\r\n// export async function createTask(token, taskData) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     method: 'POST',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(taskData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Récupérer la liste des tâches\r\n// export async function getTasks(token) {\r\n//   const res = await fetch(`${API_URL}/tasks`, {\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Modifier une tâche\r\n// export async function updateTask(token, id, updatedData) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'PUT',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(updatedData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Supprimer une tâche\r\n// export async function deleteTask(token, id) {\r\n//   const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n//     method: 'DELETE',\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // ----------- Idées -----------\r\n\r\n// // Créer une idée\r\n// export async function createIdea(token, ideaData) {\r\n//   const res = await fetch(`${API_URL}/ideas`, {\r\n//     method: 'POST',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(ideaData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Récupérer toutes les idées\r\n// export async function getIdeas(token) {\r\n//   const res = await fetch(`${API_URL}/ideas`, {\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Modifier une idée\r\n// export async function updateIdea(token, id, updatedData) {\r\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n//     method: 'PUT',\r\n//     headers: { \r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//     body: JSON.stringify(updatedData),\r\n//   });\r\n//   return res.json();\r\n// }\r\n\r\n// // Supprimer une idée\r\n// export async function deleteIdea(token, id) {\r\n//   const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n//     method: 'DELETE',\r\n//     headers: { Authorization: `Bearer ${token}` },\r\n//   });\r\n//   return res.json();\r\n// }\r\nconst API_URL = 'http://localhost:4000/api';\r\n\r\nfunction authHeaders(token) {\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n}\r\n\r\n// Utilisateurs\r\nexport async function register(name, email, password) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/users/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ name, email, password }),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('register error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function login(email, password) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/users/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('login error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\n// Tâches\r\nexport async function createTask(token, taskData) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/tasks`, {\r\n      method: 'POST',\r\n      headers: authHeaders(token),\r\n      body: JSON.stringify(taskData),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('createTask error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function getTasks(token) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/tasks`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    const data = await res.json();\r\n    console.log('getTasks data:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('getTasks error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function updateTask(token, id, updatedData) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n      method: 'PUT',\r\n      headers: authHeaders(token),\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('updateTask error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function deleteTask(token, id) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n      method: 'DELETE',\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('deleteTask error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\n// Idées (similaire aux tâches)\r\nexport async function createIdea(token, ideaData) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/ideas`, {\r\n      method: 'POST',\r\n      headers: authHeaders(token),\r\n      body: JSON.stringify(ideaData),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('createIdea error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function getIdeas(token) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/ideas`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('getIdeas error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function updateIdea(token, id, updatedData) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n      method: 'PUT',\r\n      headers: authHeaders(token),\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('updateIdea error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport async function deleteIdea(token, id) {\r\n  try {\r\n    const res = await fetch(`${API_URL}/ideas/${id}`, {\r\n      method: 'DELETE',\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!res.ok) throw new Error(`Erreur ${res.status}`);\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('deleteIdea error:', error);\r\n    return { error: error.message };\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
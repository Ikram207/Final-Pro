{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     // Fetch tasks after login\n//     const { getTasks } = await import('./services/api');\n//     const fetched = await getTasks(jwt);\n//     setTasks(Array.isArray(fetched) ? fetched : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setView('login');\n//   };\n\n//   // Listen for taskAdded event to refresh tasks\n//   React.useEffect(() => {\n//     if (!token || view !== 'tasks') return;\n//     const { getTasks } = require('./services/api');\n//     const fetchTasks = async () => {\n//       const fetched = await getTasks(token);\n//       setTasks(Array.isArray(fetched) ? fetched : []);\n//     };\n//     fetchTasks();\n//     const handler = () => fetchTasks();\n//     window.addEventListener('taskAdded', handler);\n//     return () => window.removeEventListener('taskAdded', handler);\n//   }, [token, view]);\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\n//       {!token && view === 'login' && (\n//         <>\n//           <Login onLogin={handleLogin} />\n//           <p>\n//             Pas de compte ?{' '}\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {!token && view === 'register' && (\n//         <>\n//           <Register onRegister={() => setView('login')} />\n//           <p>\n//             Déjà un compte ?{' '}\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <button onClick={handleLogout}>Déconnexion</button>\n//           <TaskForm token={token} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// // import React, { useState, useEffect } from 'react';\n// // import Navbar from './components/Navbar';\n// // import Login from './components/Login';\n// // import Register from './components/Register';\n// // import TaskForm from './components/TaskForm';\n// // import TaskList from './components/TaskList';\n// // import IdeaForm from './components/IdeaForm';\n// // import IdeaTable from './components/IdeaTable';\n// // import { getTasks, getIdeas } from './services/api';\n\n// // export default function App() {\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\n// //   const [view, setView] = useState('login');\n// //   const [tasks, setTasks] = useState([]);\n// //   const [ideas, setIdeas] = useState([]);\n\n// //   const handleLogin = async (jwt) => {\n// //     localStorage.setItem('token', jwt);\n// //     setToken(jwt);\n// //     setView('tasks');\n\n// //     const fetchedTasks = await getTasks(jwt);\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n// //     const fetchedIdeas = await getIdeas(jwt);\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem('token');\n// //     setToken('');\n// //     setTasks([]);\n// //     setIdeas([]);\n// //     setView('login');\n// //   };\n\n// //   // Rafraîchir les données quand on change de vue\n// //   useEffect(() => {\n// //     if (!token) return;\n// //     if (view === 'tasks') {\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n// //     }\n// //     if (view === 'ideas') {\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n// //     }\n// //   }, [view, token]);\n\n// //   return (\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n// //       {token && view === 'tasks' && (\n// //         <>\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n// //         </>\n// //       )}\n\n// //       {token && view === 'ideas' && (\n// //         <>\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n// //         </>\n// //       )}\n// //     </div>\n// //   );\n// // }\n// import React, { useState, useEffect } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Navbar from './components/Navbar';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\n\n// export default function App() {\n//   // Récupérer token en localStorage si présent\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   // Définir la page active selon si token existe ou pas\n//   // Si token, plateforme; sinon login par défaut\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\n\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   // Charger les données à chaque changement de token ou view\n//   useEffect(() => {\n//     if (!token) return;\n\n//     if (view === 'tasks') {\n//       getTasks(token)\n//         .then(data => setTasks(data))\n//         .catch(console.error);\n//     } else if (view === 'ideas') {\n//       getIdeas(token)\n//         .then(data => setIdeas(data))\n//         .catch(console.error);\n//     }\n//   }, [token, view]);\n\n//   // Gestion login réussie : stocker token, passer à la plateforme\n//   function handleLogin(newToken) {\n//     localStorage.setItem('token', newToken);\n//     setToken(newToken);\n//     setPage('platform');  // on passe à la plateforme après login\n//   }\n\n//   // Gestion logout : supprimer token, revenir au login\n//   function handleLogout() {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setPage('login');  // revenir à la page login\n//   }\n\n//   // Affichage conditionnel selon page\n//   if (page === 'login') {\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\n//   }\n\n//   if (page === 'register') {\n//     return <Register goToLogin={() => setPage('login')} />;\n//   }\n\n//   // Page plateforme principale (tasks + ideas)\n//   return (\n//     <div>\n//       <Navbar setView={setView} handleLogout={handleLogout} />\n//       {view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n//       {view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Navbar from './components/Navbar';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport IdeaForm from './components/IdeaForm';\nimport IdeaTable from './components/IdeaTable';\nimport { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // Token stocké en localStorage ou vide\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n  // Page actuelle : 'login', 'register' ou 'platform'\n  const [page, setPage] = useState(token ? 'platform' : 'login');\n\n  // Vue active dans la plateforme : 'tasks' ou 'ideas'\n  const [view, setView] = useState('tasks');\n\n  // Données des tasks et ideas\n  const [tasks, setTasks] = useState([]);\n  const [ideas, setIdeas] = useState([]);\n\n  // Charger les données à chaque changement de token ou de vue\n  useEffect(() => {\n    if (!token) return; // pas connecté, ne rien charger\n\n    async function fetchData() {\n      try {\n        if (view === 'tasks') {\n          const data = await getTasks(token);\n          setTasks(data);\n        } else if (view === 'ideas') {\n          const data = await getIdeas(token);\n          setIdeas(data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchData();\n  }, [token, view]);\n\n  // Après connexion : stocker token, passer à la plateforme\n  function handleLogin(newToken) {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n    setPage('platform');\n  }\n\n  // Déconnexion : nettoyage token et données, retour au login\n  function handleLogout() {\n    localStorage.removeItem('token');\n    setToken('');\n    setTasks([]);\n    setIdeas([]);\n    setPage('login');\n  }\n\n  // Affichage selon la page\n  if (page === 'login') {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin,\n      goToRegister: () => setPage('register')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 12\n    }, this);\n  }\n  if (page === 'register') {\n    return /*#__PURE__*/_jsxDEV(Register, {\n      goToLogin: () => setPage('login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Plateforme principale avec navbar et contenu selon vue\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setView: setView,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), view === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        token: token,\n        onSave: newTask => setTasks(prev => [...prev, newTask])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        token: token,\n        tasks: tasks,\n        setTasks: setTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), view === 'ideas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IdeaForm, {\n        token: token,\n        onSave: newIdea => setIdeas(prev => [...prev, newIdea])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IdeaTable, {\n        ideas: ideas,\n        setIdeas: setIdeas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+u6owTSAnYOP+643KmA4hZLdlgA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Register","Navbar","TaskForm","TaskList","IdeaForm","IdeaTable","login","register","getTasks","createTask","updateTask","deleteTask","getIdeas","createIdea","updateIdea","deleteIdea","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","localStorage","getItem","page","setPage","view","setView","tasks","setTasks","ideas","setIdeas","fetchData","data","error","console","handleLogin","newToken","setItem","handleLogout","removeItem","onLogin","goToRegister","fileName","_jsxFileName","lineNumber","columnNumber","goToLogin","children","onSave","newTask","prev","newIdea","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     // Fetch tasks after login\r\n//     const { getTasks } = await import('./services/api');\r\n//     const fetched = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetched) ? fetched : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Listen for taskAdded event to refresh tasks\r\n//   React.useEffect(() => {\r\n//     if (!token || view !== 'tasks') return;\r\n//     const { getTasks } = require('./services/api');\r\n//     const fetchTasks = async () => {\r\n//       const fetched = await getTasks(token);\r\n//       setTasks(Array.isArray(fetched) ? fetched : []);\r\n//     };\r\n//     fetchTasks();\r\n//     const handler = () => fetchTasks();\r\n//     window.addEventListener('taskAdded', handler);\r\n//     return () => window.removeEventListener('taskAdded', handler);\r\n//   }, [token, view]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n//       {!token && view === 'login' && (\r\n//         <>\r\n//           <Login onLogin={handleLogin} />\r\n//           <p>\r\n//             Pas de compte ?{' '}\r\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {!token && view === 'register' && (\r\n//         <>\r\n//           <Register onRegister={() => setView('login')} />\r\n//           <p>\r\n//             Déjà un compte ?{' '}\r\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <button onClick={handleLogout}>Déconnexion</button>\r\n//           <TaskForm token={token} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import Navbar from './components/Navbar';\r\n// // import Login from './components/Login';\r\n// // import Register from './components/Register';\r\n// // import TaskForm from './components/TaskForm';\r\n// // import TaskList from './components/TaskList';\r\n// // import IdeaForm from './components/IdeaForm';\r\n// // import IdeaTable from './components/IdeaTable';\r\n// // import { getTasks, getIdeas } from './services/api';\r\n\r\n// // export default function App() {\r\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n// //   const [view, setView] = useState('login');\r\n// //   const [tasks, setTasks] = useState([]);\r\n// //   const [ideas, setIdeas] = useState([]);\r\n\r\n// //   const handleLogin = async (jwt) => {\r\n// //     localStorage.setItem('token', jwt);\r\n// //     setToken(jwt);\r\n// //     setView('tasks');\r\n\r\n// //     const fetchedTasks = await getTasks(jwt);\r\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n// //     const fetchedIdeas = await getIdeas(jwt);\r\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setToken('');\r\n// //     setTasks([]);\r\n// //     setIdeas([]);\r\n// //     setView('login');\r\n// //   };\r\n\r\n// //   // Rafraîchir les données quand on change de vue\r\n// //   useEffect(() => {\r\n// //     if (!token) return;\r\n// //     if (view === 'tasks') {\r\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //     if (view === 'ideas') {\r\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //   }, [view, token]);\r\n\r\n// //   return (\r\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n// //       {token && view === 'tasks' && (\r\n// //         <>\r\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {token && view === 'ideas' && (\r\n// //         <>\r\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n// //         </>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n// import React, { useState, useEffect } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import Navbar from './components/Navbar';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\r\n\r\n// export default function App() {\r\n//   // Récupérer token en localStorage si présent\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  \r\n//   // Définir la page active selon si token existe ou pas\r\n//   // Si token, plateforme; sinon login par défaut\r\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\r\n  \r\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   // Charger les données à chaque changement de token ou view\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     if (view === 'tasks') {\r\n//       getTasks(token)\r\n//         .then(data => setTasks(data))\r\n//         .catch(console.error);\r\n//     } else if (view === 'ideas') {\r\n//       getIdeas(token)\r\n//         .then(data => setIdeas(data))\r\n//         .catch(console.error);\r\n//     }\r\n//   }, [token, view]);\r\n\r\n//   // Gestion login réussie : stocker token, passer à la plateforme\r\n//   function handleLogin(newToken) {\r\n//     localStorage.setItem('token', newToken);\r\n//     setToken(newToken);\r\n//     setPage('platform');  // on passe à la plateforme après login\r\n//   }\r\n\r\n//   // Gestion logout : supprimer token, revenir au login\r\n//   function handleLogout() {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setPage('login');  // revenir à la page login\r\n//   }\r\n\r\n//   // Affichage conditionnel selon page\r\n//   if (page === 'login') {\r\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n//   }\r\n\r\n//   if (page === 'register') {\r\n//     return <Register goToLogin={() => setPage('login')} />;\r\n//   }\r\n\r\n//   // Page plateforme principale (tasks + ideas)\r\n//   return (\r\n//     <div>\r\n//       <Navbar setView={setView} handleLogout={handleLogout} />\r\n//       {view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n//       {view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\nimport React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport Navbar from './components/Navbar';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskList from './components/TaskList';\r\nimport IdeaForm from './components/IdeaForm';\r\nimport IdeaTable from './components/IdeaTable';\r\nimport { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\r\n\r\nexport default function App() {\r\n  // Token stocké en localStorage ou vide\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  \r\n  // Page actuelle : 'login', 'register' ou 'platform'\r\n  const [page, setPage] = useState(token ? 'platform' : 'login');\r\n  \r\n  // Vue active dans la plateforme : 'tasks' ou 'ideas'\r\n  const [view, setView] = useState('tasks');\r\n  \r\n  // Données des tasks et ideas\r\n  const [tasks, setTasks] = useState([]);\r\n  const [ideas, setIdeas] = useState([]);\r\n\r\n  // Charger les données à chaque changement de token ou de vue\r\n  useEffect(() => {\r\n    if (!token) return;  // pas connecté, ne rien charger\r\n\r\n    async function fetchData() {\r\n      try {\r\n        if (view === 'tasks') {\r\n          const data = await getTasks(token);\r\n          setTasks(data);\r\n        } else if (view === 'ideas') {\r\n          const data = await getIdeas(token);\r\n          setIdeas(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [token, view]);\r\n\r\n  // Après connexion : stocker token, passer à la plateforme\r\n  function handleLogin(newToken) {\r\n    localStorage.setItem('token', newToken);\r\n    setToken(newToken);\r\n    setPage('platform');\r\n  }\r\n\r\n  // Déconnexion : nettoyage token et données, retour au login\r\n  function handleLogout() {\r\n    localStorage.removeItem('token');\r\n    setToken('');\r\n    setTasks([]);\r\n    setIdeas([]);\r\n    setPage('login');\r\n  }\r\n\r\n  // Affichage selon la page\r\n  if (page === 'login') {\r\n    return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n  }\r\n\r\n  if (page === 'register') {\r\n    return <Register goToLogin={() => setPage('login')} />;\r\n  }\r\n\r\n  // Plateforme principale avec navbar et contenu selon vue\r\n  return (\r\n    <div>\r\n      <Navbar setView={setView} handleLogout={handleLogout} />\r\n      {view === 'tasks' && (\r\n        <>\r\n          <TaskForm token={token} onSave={newTask => setTasks(prev => [...prev, newTask])} />\r\n          <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n        </>\r\n      )}\r\n      {view === 'ideas' && (\r\n        <>\r\n          <IdeaForm token={token} onSave={newIdea => setIdeas(prev => [...prev, newIdea])} />\r\n          <IdeaTable ideas={ideas} setIdeas={setIdeas} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// // ======== FAKE API simulée ==========\n// const fakeApi = {\n//   users: [],\n//   tasks: [],\n//   register(name, email, password) {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         if (this.users.some((u) => u.email === email)) {\n//           resolve({ error: \"Cet email est déjà utilisé.\" });\n//         } else {\n//           this.users.push({ name, email, password });\n//           resolve({ message: \"Inscription réussie\" });\n//         }\n//       }, 500);\n//     });\n//   },\n//   login(email, password) {\n//     return new Promise((resolve) => {\n//       setTimeout(() => {\n//         const user = this.users.find(\n//           (u) => u.email === email && u.password === password\n//         );\n//         if (user) {\n//           resolve({ token: \"fake-jwt-token\", name: user.name });\n//         } else {\n//           resolve({ message: \"Email ou mot de passe incorrect\" });\n//         }\n//       }, 500);\n//     });\n//   },\n//   getTasks() {\n//     return new Promise((resolve) => {\n//       setTimeout(() => resolve(this.tasks), 300);\n//     });\n//   },\n//   createTask(task) {\n//     return new Promise((resolve) => {\n//       const newTask = { ...task, id: Date.now() };\n//       this.tasks.push(newTask);\n//       setTimeout(() => resolve(newTask), 300);\n//     });\n//   },\n//   updateTask(id, updated) {\n//     return new Promise((resolve) => {\n//       this.tasks = this.tasks.map((t) =>\n//         t.id === id ? { ...t, ...updated } : t\n//       );\n//       setTimeout(() => resolve(this.tasks.find((t) => t.id === id)), 300);\n//     });\n//   },\n//   deleteTask(id) {\n//     return new Promise((resolve) => {\n//       this.tasks = this.tasks.filter((t) => t.id !== id);\n//       setTimeout(() => resolve({ success: true }), 300);\n//     });\n//   },\n// };\n\n// // ======== Composant Navbar ==========\n// function Navbar({ onLogout, userName }) {\n//   return (\n//     <nav\n//       style={{\n//         backgroundColor: \"#007BFF\",\n//         padding: \"10px 20px\",\n//         color: \"#fff\",\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         alignItems: \"center\",\n//         fontWeight: \"bold\",\n//         fontSize: \"1.2rem\",\n//         marginBottom: 20,\n//         borderRadius: 6,\n//       }}\n//     >\n//       <div>Mon App Tâches - Bonjour {userName}</div>\n//       <button\n//         onClick={() => {\n//           if (window.confirm(\"Voulez-vous vraiment vous déconnecter ?\")) {\n//             onLogout();\n//           }\n//         }}\n//         style={{\n//           backgroundColor: \"#dc3545\",\n//           color: \"white\",\n//           border: \"none\",\n//           padding: \"6px 12px\",\n//           borderRadius: 4,\n//           cursor: \"pointer\",\n//         }}\n//       >\n//         Déconnexion\n//       </button>\n//     </nav>\n//   );\n// }\n\n// // ======== Login ==========\n// function Login({ onLogin }) {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\");\n//     const result = await fakeApi.login(email, password);\n//     if (result.token) {\n//       onLogin(result.token, result.name);\n//     } else {\n//       setError(result.message || \"Erreur de connexion\");\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         maxWidth: 350,\n//         margin: \"40px auto\",\n//         padding: 20,\n//         border: \"1px solid #ccc\",\n//         borderRadius: 8,\n//         backgroundColor: \"#fff\",\n//       }}\n//     >\n//       <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>Connexion</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"email\"\n//           placeholder=\"Email\"\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           required\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             marginBottom: 15,\n//             borderRadius: 5,\n//             border: \"1px solid #ccc\",\n//           }}\n//         />\n//         <input\n//           type=\"password\"\n//           placeholder=\"Mot de passe\"\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           required\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             marginBottom: 15,\n//             borderRadius: 5,\n//             border: \"1px solid #ccc\",\n//           }}\n//         />\n//         <button\n//           type=\"submit\"\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             backgroundColor: \"#007BFF\",\n//             color: \"white\",\n//             fontWeight: \"bold\",\n//             border: \"none\",\n//             borderRadius: 5,\n//             cursor: \"pointer\",\n//           }}\n//         >\n//           Se connecter\n//         </button>\n//         {error && (\n//           <p style={{ color: \"red\", marginTop: 15, textAlign: \"center\" }}>\n//             {error}\n//           </p>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }\n\n// // ======== Register ==========\n// function Register({ onRegister }) {\n//   const [name, setName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\");\n//     setSuccess(\"\");\n//     const result = await fakeApi.register(name, email, password);\n//     if (result.message) {\n//       setSuccess(\"Inscription réussie ! Vous pouvez vous connecter.\");\n//       setName(\"\");\n//       setEmail(\"\");\n//       setPassword(\"\");\n//       setTimeout(() => {\n//         onRegister();\n//       }, 1500);\n//     } else {\n//       setError(result.error || \"Erreur lors de l'inscription\");\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         maxWidth: 350,\n//         margin: \"40px auto\",\n//         padding: 20,\n//         border: \"1px solid #ccc\",\n//         borderRadius: 8,\n//         backgroundColor: \"#fff\",\n//       }}\n//     >\n//       <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>Inscription</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Nom\"\n//           value={name}\n//           onChange={(e) => setName(e.target.value)}\n//           required\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             marginBottom: 15,\n//             borderRadius: 5,\n//             border: \"1px solid #ccc\",\n//           }}\n//         />\n//         <input\n//           type=\"email\"\n//           placeholder=\"Email\"\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           required\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             marginBottom: 15,\n//             borderRadius: 5,\n//             border: \"1px solid #ccc\",\n//           }}\n//         />\n//         <input\n//           type=\"password\"\n//           placeholder=\"Mot de passe\"\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           required\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             marginBottom: 15,\n//             borderRadius: 5,\n//             border: \"1px solid #ccc\",\n//           }}\n//         />\n//         <button\n//           type=\"submit\"\n//           style={{\n//             width: \"100%\",\n//             padding: 10,\n//             backgroundColor: \"#007BFF\",\n//             color: \"white\",\n//             fontWeight: \"bold\",\n//             border: \"none\",\n//             borderRadius: 5,\n//             cursor: \"pointer\",\n//           }}\n//         >\n//           S'inscrire\n//         </button>\n//         {success && (\n//           <p style={{ color: \"green\", marginTop: 15, textAlign: \"center\" }}>\n//             {success}\n//           </p>\n//         )}\n//         {error && (\n//           <p style={{ color: \"red\", marginTop: 15, textAlign: \"center\" }}>\n//             {error}\n//           </p>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }\n\n// // ======== TaskForm ==========\n// function TaskForm({ onSave, editingTask, cancelEdit }) {\n//   const [title, setTitle] = useState(\"\");\n//   const [status, setStatus] = useState(\"pending\");\n//   const [dueDate, setDueDate] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n\n//   useEffect(() => {\n//     if (editingTask) {\n//       setTitle(editingTask.title || \"\");\n//       setStatus(editingTask.status || \"pending\");\n//       setDueDate(editingTask.dueDate ? editingTask.dueDate.substring(0, 10) : \"\");\n//       setDescription(editingTask.description || \"\");\n//     } else {\n//       setTitle(\"\");\n//       setStatus(\"pending\");\n//       setDueDate(\"\");\n//       setDescription(\"\");\n//     }\n//   }, [editingTask]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (!title.trim()) {\n//       alert(\"Le titre est obligatoire\");\n//       return;\n//     }\n//     onSave({ title, status, dueDate, description });\n//   };\n\n//   return (\n//     <form\n//       onSubmit={handleSubmit}\n//       style={{\n//         marginBottom: 20,\n//         border: \"1px solid #ccc\",\n//         padding: 15,\n//         borderRadius: 6,\n//         backgroundColor: \"#fff\",\n//       }}\n//     >\n//       <h3>{editingTask ? \"Modifier une tâche\" : \"Ajouter une tâche\"}</h3>\n\n//       <div style={{ marginBottom: 10 }}>\n//         <label>Titre :</label>\n//         <br />\n//         <input\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//           style={{ width: \"100%\", padding: 5 }}\n//         />\n//       </div>\n\n//       <div style={{ marginBottom: 10 }}>\n//         <label>Statut :</label>\n//         <br />\n//         <select\n//           value={status}\n//           onChange={(e) => setStatus(e.target.value)}\n//           required\n//           style={{ width: \"100%\", padding: 5 }}\n//         >\n//           <option value=\"pending\">En attente</option>\n//           <option value=\"in-progress\">En cours</option>\n//           <option value=\"done\">Terminé</option>\n//         </select>\n//       </div>\n\n//       <div style={{ marginBottom: 10 }}>\n//         <label>Date limite :</label>\n//         <br />\n//         <input\n//           type=\"date\"\n//           value={dueDate}\n//           onChange={(e) => setDueDate(e.target.value)}\n//           style={{ width: \"100%\", padding: 5 }}\n//         />\n//       </div>\n\n//       <div style={{ marginBottom: 10 }}>\n//         <label>Description :</label>\n//         <br />\n//         <textarea\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           style={{ width: \"100%\", padding: 5 }}\n//         />\n//       </div>\n\n//       <button type=\"submit\" style={{ padding: \"5px 10px\" }}>\n//         {editingTask ? \"Mettre à jour\" : \"Enregistrer\"}\n//       </button>\n\n//       {editingTask && (\n//         <button\n//           type=\"button\"\n//           onClick={cancelEdit}\n//           style={{ padding: \"5px 10px\", marginLeft: 10, background: \"#ccc\" }}\n//         >\n//           Annuler\n//         </button>\n//       )}\n//     </form>\n//   );\n// }\n\n// // ======== TaskList ==========\n// const statusColors = {\n//   pending: \"#f0ad4e\",\n//   \"in-progress\": \"#0275d8\",\n//   done: \"#5cb85c\",\n// };\n\n// function TaskList({ tasks, onEdit, onDelete }) {\n//   return (\n//     <table\n//       style={{\n//         width: \"100%\",\n//         borderCollapse: \"collapse\",\n//         boxShadow: \"0 0 10px rgba(0,0,0,0.1)\",\n//         backgroundColor: \"#fff\",\n//       }}\n//     >\n//       <thead>\n//         <tr style={{ backgroundColor: \"#007BFF\", color: \"#fff\", textAlign: \"left\" }}>\n//           <th style={{ padding: \"10px\" }}>Titre</th>\n//           <th style={{ padding: \"10px\" }}>Statut</th>\n//           <th style={{ padding: \"10px\" }}>Date limite</th>\n//           <th style={{ padding: \"10px\" }}>Description</th>\n//           <th style={{ padding: \"10px\" }}>Actions</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {tasks.length > 0 ? (\n//           tasks.map((task) => (\n//             <tr\n//               key={task.id}\n//               style={{\n//                 borderBottom: \"1px solid #ddd\",\n//                 transition: \"background-color 0.3s\",\n//                 cursor: \"default\",\n//               }}\n//               onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = \"#f9f9f9\")}\n//               onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = \"\")}\n//             >\n//               <td style={{ padding: \"8px\" }}>{task.title || \"Titre manquant\"}</td>\n//               <td style={{ padding: \"8px\" }}>\n//                 <span\n//                   style={{\n//                     padding: \"4px 8px\",\n//                     borderRadius: 12,\n//                     color: \"#fff\",\n//                     backgroundColor: statusColors[task.status] || \"#6c757d\",\n//                     fontWeight: \"bold\",\n//                     textTransform: \"capitalize\",\n//                     fontSize: \"0.9rem\",\n//                     display: \"inline-block\",\n//                     minWidth: 90,\n//                     textAlign: \"center\",\n//                   }}\n//                 >\n//                   {task.status || \"Statut manquant\"}\n//                 </span>\n//               </td>\n//               <td style={{ padding: \"8px\" }}>\n//                 {task.dueDate ? task.dueDate.substring(0, 10) : \"Date manquante\"}\n//               </td>\n//               <td style={{ padding: \"8px\" }}>{task.description || \"Description manquante\"}</td>\n//               <td style={{ padding: \"8px\" }}>\n//                 <button\n//                   onClick={() => onEdit(task)}\n//                   style={{\n//                     cursor: \"pointer\",\n//                     marginRight: 8,\n//                     backgroundColor: \"#ffc107\",\n//                     border: \"none\",\n//                     borderRadius: 4,\n//                     padding: \"4px 8px\",\n//                   }}\n//                   title=\"Modifier\"\n//                 >\n//                   ✏️\n//                 </button>\n//                 <button\n//                   onClick={() => {\n//                     if (window.confirm(\"Confirmer la suppression ?\")) onDelete(task.id);\n//                   }}\n//                   style={{\n//                     cursor: \"pointer\",\n//                     backgroundColor: \"#dc3545\",\n//                     border: \"none\",\n//                     borderRadius: 4,\n//                     padding: \"4px 8px\",\n//                     color: \"#fff\",\n//                   }}\n//                   title=\"Supprimer\"\n//                 >\n//                   🗑️\n//                 </button>\n//               </td>\n//             </tr>\n//           ))\n//         ) : (\n//           <tr>\n//             <td colSpan=\"5\" style={{ textAlign: \"center\", padding: 20 }}>\n//               Aucune tâche disponible\n//             </td>\n//           </tr>\n//         )}\n//       </tbody>\n//     </table>\n//   );\n// }\n\n// // ======== APP PRINCIPAL ==========\n// export default function App() {\n//   const [token, setToken] = useState(\"\");\n//   const [userName, setUserName] = useState(\"\");\n//   const [view, setView] = useState(\"login\"); // login | register | dashboard\n\n//   const [tasks, setTasks] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   // Charger les tâches quand on est connecté et sur dashboard\n//   useEffect(() => {\n//     if (token && view === \"dashboard\") {\n//       fakeApi.getTasks().then(setTasks);\n//     }\n//   }, [token, view]);\n\n//   // Connexion réussie\n//   const handleLogin = (jwt, name) => {\n//     setToken(jwt);\n//     setUserName(name);\n//     setView(\"dashboard\");\n//   };\n\n//   // Déconnexion\n//   const handleLogout = () => {\n//     setToken(\"\");\n//     setUserName(\"\");\n//     setTasks([]);\n//     setEditingTask(null);\n//     setView(\"login\");\n//   };\n\n//   // Enregistrer / modifier tâche\n//   const handleSaveTask = (taskData) => {\n//     if (editingTask) {\n//       fakeApi.updateTask(editingTask.id, taskData).then((updated) => {\n//         setTasks(tasks.map((t) => (t.id === updated.id ? updated : t)));\n//         setEditingTask(null);\n//       });\n//     } else {\n//       fakeApi.createTask(taskData).then((newTask) => {\n//         setTasks([...tasks, newTask]);\n//       });\n//     }\n//   };\n\n//   // Supprimer tâche\n//   const handleDeleteTask = (id) => {\n//     fakeApi.deleteTask(id).then(() => {\n//       setTasks(tasks.filter((t) => t.id !== id));\n//       if (editingTask && editingTask.id === id) {\n//         setEditingTask(null);\n//       }\n//     });\n//   };\n\n//   if (view === \"login\") {\n//     return (\n//       <>\n//         <Login onLogin={handleLogin} />\n//         <p style={{ textAlign: \"center\" }}>\n//           Pas encore de compte ?{\" \"}\n//           <button\n//             onClick={() => setView(\"register\")}\n//             style={{\n//               color: \"blue\",\n//               cursor: \"pointer\",\n//               border: \"none\",\n//               background: \"none\",\n//               padding: 0,\n//             }}\n//           >\n//             Inscrivez-vous\n//           </button>\n//         </p>\n//       </>\n//     );\n//   }\n\n//   if (view === \"register\") {\n//     return (\n//       <>\n//         <Register onRegister={() => setView(\"login\")} />\n//         <p style={{ textAlign: \"center\" }}>\n//           Déjà un compte ?{\" \"}\n//           <button\n//             onClick={() => setView(\"login\")}\n//             style={{\n//               color: \"blue\",\n//               cursor: \"pointer\",\n//               border: \"none\",\n//               background: \"none\",\n//               padding: 0,\n//             }}\n//           >\n//             Connectez-vous\n//           </button>\n//         </p>\n//       </>\n//     );\n//   }\n\n//   if (view === \"dashboard\") {\n//     return (\n//       <div\n//         style={{\n//           maxWidth: 900,\n//           margin: \"auto\",\n//           padding: 20,\n//                    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n//           backgroundColor: \"#f5f5f5\",\n//           minHeight: \"100vh\",\n//         }}\n//       >\n//         <Navbar onLogout={handleLogout} userName={userName} />\n\n//         <TaskForm\n//           onSave={handleSaveTask}\n//           editingTask={editingTask}\n//           cancelEdit={() => setEditingTask(null)}\n//         />\n\n//         <TaskList\n//           tasks={tasks}\n//           onEdit={setEditingTask}\n//           onDelete={handleDeleteTask}\n//         />\n//       </div>\n//     );\n//   }\n\n//   return null; // fallback, ne devrait jamais arriver\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\"; // Si tu as un composant Navbar séparé\nimport Login from \"./Login\"; // Idem pour Login/Register/Form\nimport Register from \"./Register\";\nimport TaskForm from \"./TaskForm\";\nimport TaskList from \"./TaskList\";\nimport TaskFilter from \"./TaskFilter\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:4000/api\"; // Change si nécessaire\n\nexport default function App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || \"\");\n  const [userName, setUserName] = useState(localStorage.getItem(\"userName\") || \"\");\n  const [view, setView] = useState(token ? \"dashboard\" : \"login\");\n  const [tasks, setTasks] = useState([]);\n  const [editingTask, setEditingTask] = useState(null);\n  const [filters, setFilters] = useState({\n    status: \"\",\n    search: \"\",\n    sortField: \"\",\n    sortOrder: \"asc\"\n  });\n\n  // Fonction pour charger les tâches depuis backend avec filtres\n  const fetchTasks = async () => {\n    if (!token) return;\n    try {\n      // Construire query string avec filtres\n      const params = new URLSearchParams();\n      if (filters.status) params.append(\"status\", filters.status);\n      if (filters.search) params.append(\"search\", filters.search);\n      if (filters.sortField) params.append(\"sortField\", filters.sortField);\n      if (filters.sortOrder) params.append(\"sortOrder\", filters.sortOrder);\n      const res = await fetch(`${API_URL}/tasks?${params.toString()}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!res.ok) throw new Error(\"Erreur lors du chargement des tâches\");\n      const data = await res.json();\n      setTasks(data);\n    } catch (error) {\n      alert(error.message);\n      if (error.message.includes(\"401\")) handleLogout(); // Token expiré ou invalide\n    }\n  };\n\n  // Charger tâches à l'initial et à chaque changement de filtre\n  useEffect(() => {\n    if (view === \"dashboard\") {\n      fetchTasks();\n    }\n  }, [view, filters]);\n\n  // Connexion\n  const handleLogin = async (email, password) => {\n    try {\n      const res = await fetch(`${API_URL}/users/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || \"Erreur de connexion\");\n      setToken(data.token);\n      setUserName(data.name);\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"userName\", data.name);\n      setView(\"dashboard\");\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // Inscription\n  const handleRegister = async (name, email, password) => {\n    try {\n      const res = await fetch(`${API_URL}/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || \"Erreur lors de l'inscription\");\n      alert(\"Inscription réussie ! Connectez-vous.\");\n      setView(\"login\");\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // Déconnexion\n  const handleLogout = () => {\n    setToken(\"\");\n    setUserName(\"\");\n    setTasks([]);\n    setEditingTask(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userName\");\n    setView(\"login\");\n  };\n\n  // Sauvegarder tâche (création ou mise à jour)\n  const handleSaveTask = async taskData => {\n    try {\n      const method = editingTask ? \"PUT\" : \"POST\";\n      const url = editingTask ? `${API_URL}/tasks/${editingTask._id}` : `${API_URL}/tasks`;\n      const res = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(taskData)\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || \"Erreur lors de l'enregistrement\");\n      if (editingTask) {\n        setTasks(tasks.map(t => t._id === data._id ? data : t));\n        setEditingTask(null);\n      } else {\n        setTasks([...tasks, data]);\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // Supprimer tâche\n  const handleDeleteTask = async id => {\n    if (!window.confirm(\"Confirmer la suppression ?\")) return;\n    try {\n      const res = await fetch(`${API_URL}/tasks/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!res.ok) throw new Error(\"Erreur lors de la suppression\");\n      setTasks(tasks.filter(t => t._id !== id));\n      if (editingTask && editingTask._id === id) setEditingTask(null);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // Changement des filtres venant du composant TaskFilter\n  const handleFilterChange = newFilters => {\n    setFilters(newFilters);\n  };\n  if (view === \"login\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Login, {\n        onLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [\"Pas encore de compte ?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setView(\"register\"),\n          style: {\n            color: \"blue\",\n            cursor: \"pointer\",\n            border: \"none\",\n            background: \"none\",\n            padding: 0\n          },\n          children: \"Inscrivez-vous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  if (view === \"register\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Register, {\n        onRegister: handleRegister\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [\"D\\xE9j\\xE0 un compte ?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setView(\"login\"),\n          style: {\n            color: \"blue\",\n            cursor: \"pointer\",\n            border: \"none\",\n            background: \"none\",\n            padding: 0\n          },\n          children: \"Connectez-vous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  if (view === \"dashboard\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 900,\n        margin: \"auto\",\n        padding: 20,\n        fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n        backgroundColor: \"#f5f5f5\",\n        minHeight: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        onLogout: handleLogout,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n        onSave: handleSaveTask,\n        editingTask: editingTask,\n        cancelEdit: () => setEditingTask(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 840,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskFilter, {\n        onFilterChange: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        onEdit: setEditingTask,\n        onDelete: handleDeleteTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n}\n_s(App, \"327txr7FS0OFXNmQvONGBT9aBCQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Login","Register","TaskForm","TaskList","TaskFilter","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","token","setToken","localStorage","getItem","userName","setUserName","view","setView","tasks","setTasks","editingTask","setEditingTask","filters","setFilters","status","search","sortField","sortOrder","fetchTasks","params","URLSearchParams","append","res","fetch","toString","headers","Authorization","ok","Error","data","json","error","alert","message","includes","handleLogout","handleLogin","email","password","method","body","JSON","stringify","name","setItem","handleRegister","removeItem","handleSaveTask","taskData","url","_id","map","t","handleDeleteTask","id","window","confirm","filter","handleFilterChange","newFilters","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","onClick","color","cursor","border","background","padding","onRegister","maxWidth","margin","fontFamily","backgroundColor","minHeight","onLogout","onSave","cancelEdit","onFilterChange","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// // ======== FAKE API simulée ==========\r\n// const fakeApi = {\r\n//   users: [],\r\n//   tasks: [],\r\n//   register(name, email, password) {\r\n//     return new Promise((resolve) => {\r\n//       setTimeout(() => {\r\n//         if (this.users.some((u) => u.email === email)) {\r\n//           resolve({ error: \"Cet email est déjà utilisé.\" });\r\n//         } else {\r\n//           this.users.push({ name, email, password });\r\n//           resolve({ message: \"Inscription réussie\" });\r\n//         }\r\n//       }, 500);\r\n//     });\r\n//   },\r\n//   login(email, password) {\r\n//     return new Promise((resolve) => {\r\n//       setTimeout(() => {\r\n//         const user = this.users.find(\r\n//           (u) => u.email === email && u.password === password\r\n//         );\r\n//         if (user) {\r\n//           resolve({ token: \"fake-jwt-token\", name: user.name });\r\n//         } else {\r\n//           resolve({ message: \"Email ou mot de passe incorrect\" });\r\n//         }\r\n//       }, 500);\r\n//     });\r\n//   },\r\n//   getTasks() {\r\n//     return new Promise((resolve) => {\r\n//       setTimeout(() => resolve(this.tasks), 300);\r\n//     });\r\n//   },\r\n//   createTask(task) {\r\n//     return new Promise((resolve) => {\r\n//       const newTask = { ...task, id: Date.now() };\r\n//       this.tasks.push(newTask);\r\n//       setTimeout(() => resolve(newTask), 300);\r\n//     });\r\n//   },\r\n//   updateTask(id, updated) {\r\n//     return new Promise((resolve) => {\r\n//       this.tasks = this.tasks.map((t) =>\r\n//         t.id === id ? { ...t, ...updated } : t\r\n//       );\r\n//       setTimeout(() => resolve(this.tasks.find((t) => t.id === id)), 300);\r\n//     });\r\n//   },\r\n//   deleteTask(id) {\r\n//     return new Promise((resolve) => {\r\n//       this.tasks = this.tasks.filter((t) => t.id !== id);\r\n//       setTimeout(() => resolve({ success: true }), 300);\r\n//     });\r\n//   },\r\n// };\r\n\r\n// // ======== Composant Navbar ==========\r\n// function Navbar({ onLogout, userName }) {\r\n//   return (\r\n//     <nav\r\n//       style={{\r\n//         backgroundColor: \"#007BFF\",\r\n//         padding: \"10px 20px\",\r\n//         color: \"#fff\",\r\n//         display: \"flex\",\r\n//         justifyContent: \"space-between\",\r\n//         alignItems: \"center\",\r\n//         fontWeight: \"bold\",\r\n//         fontSize: \"1.2rem\",\r\n//         marginBottom: 20,\r\n//         borderRadius: 6,\r\n//       }}\r\n//     >\r\n//       <div>Mon App Tâches - Bonjour {userName}</div>\r\n//       <button\r\n//         onClick={() => {\r\n//           if (window.confirm(\"Voulez-vous vraiment vous déconnecter ?\")) {\r\n//             onLogout();\r\n//           }\r\n//         }}\r\n//         style={{\r\n//           backgroundColor: \"#dc3545\",\r\n//           color: \"white\",\r\n//           border: \"none\",\r\n//           padding: \"6px 12px\",\r\n//           borderRadius: 4,\r\n//           cursor: \"pointer\",\r\n//         }}\r\n//       >\r\n//         Déconnexion\r\n//       </button>\r\n//     </nav>\r\n//   );\r\n// }\r\n\r\n// // ======== Login ==========\r\n// function Login({ onLogin }) {\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n//     const result = await fakeApi.login(email, password);\r\n//     if (result.token) {\r\n//       onLogin(result.token, result.name);\r\n//     } else {\r\n//       setError(result.message || \"Erreur de connexion\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         maxWidth: 350,\r\n//         margin: \"40px auto\",\r\n//         padding: 20,\r\n//         border: \"1px solid #ccc\",\r\n//         borderRadius: 8,\r\n//         backgroundColor: \"#fff\",\r\n//       }}\r\n//     >\r\n//       <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>Connexion</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Email\"\r\n//           value={email}\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//           required\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             marginBottom: 15,\r\n//             borderRadius: 5,\r\n//             border: \"1px solid #ccc\",\r\n//           }}\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           placeholder=\"Mot de passe\"\r\n//           value={password}\r\n//           onChange={(e) => setPassword(e.target.value)}\r\n//           required\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             marginBottom: 15,\r\n//             borderRadius: 5,\r\n//             border: \"1px solid #ccc\",\r\n//           }}\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             backgroundColor: \"#007BFF\",\r\n//             color: \"white\",\r\n//             fontWeight: \"bold\",\r\n//             border: \"none\",\r\n//             borderRadius: 5,\r\n//             cursor: \"pointer\",\r\n//           }}\r\n//         >\r\n//           Se connecter\r\n//         </button>\r\n//         {error && (\r\n//           <p style={{ color: \"red\", marginTop: 15, textAlign: \"center\" }}>\r\n//             {error}\r\n//           </p>\r\n//         )}\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // ======== Register ==========\r\n// function Register({ onRegister }) {\r\n//   const [name, setName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [success, setSuccess] = useState(\"\");\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n//     setSuccess(\"\");\r\n//     const result = await fakeApi.register(name, email, password);\r\n//     if (result.message) {\r\n//       setSuccess(\"Inscription réussie ! Vous pouvez vous connecter.\");\r\n//       setName(\"\");\r\n//       setEmail(\"\");\r\n//       setPassword(\"\");\r\n//       setTimeout(() => {\r\n//         onRegister();\r\n//       }, 1500);\r\n//     } else {\r\n//       setError(result.error || \"Erreur lors de l'inscription\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         maxWidth: 350,\r\n//         margin: \"40px auto\",\r\n//         padding: 20,\r\n//         border: \"1px solid #ccc\",\r\n//         borderRadius: 8,\r\n//         backgroundColor: \"#fff\",\r\n//       }}\r\n//     >\r\n//       <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>Inscription</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Nom\"\r\n//           value={name}\r\n//           onChange={(e) => setName(e.target.value)}\r\n//           required\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             marginBottom: 15,\r\n//             borderRadius: 5,\r\n//             border: \"1px solid #ccc\",\r\n//           }}\r\n//         />\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Email\"\r\n//           value={email}\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//           required\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             marginBottom: 15,\r\n//             borderRadius: 5,\r\n//             border: \"1px solid #ccc\",\r\n//           }}\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           placeholder=\"Mot de passe\"\r\n//           value={password}\r\n//           onChange={(e) => setPassword(e.target.value)}\r\n//           required\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             marginBottom: 15,\r\n//             borderRadius: 5,\r\n//             border: \"1px solid #ccc\",\r\n//           }}\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           style={{\r\n//             width: \"100%\",\r\n//             padding: 10,\r\n//             backgroundColor: \"#007BFF\",\r\n//             color: \"white\",\r\n//             fontWeight: \"bold\",\r\n//             border: \"none\",\r\n//             borderRadius: 5,\r\n//             cursor: \"pointer\",\r\n//           }}\r\n//         >\r\n//           S'inscrire\r\n//         </button>\r\n//         {success && (\r\n//           <p style={{ color: \"green\", marginTop: 15, textAlign: \"center\" }}>\r\n//             {success}\r\n//           </p>\r\n//         )}\r\n//         {error && (\r\n//           <p style={{ color: \"red\", marginTop: 15, textAlign: \"center\" }}>\r\n//             {error}\r\n//           </p>\r\n//         )}\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // ======== TaskForm ==========\r\n// function TaskForm({ onSave, editingTask, cancelEdit }) {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [status, setStatus] = useState(\"pending\");\r\n//   const [dueDate, setDueDate] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (editingTask) {\r\n//       setTitle(editingTask.title || \"\");\r\n//       setStatus(editingTask.status || \"pending\");\r\n//       setDueDate(editingTask.dueDate ? editingTask.dueDate.substring(0, 10) : \"\");\r\n//       setDescription(editingTask.description || \"\");\r\n//     } else {\r\n//       setTitle(\"\");\r\n//       setStatus(\"pending\");\r\n//       setDueDate(\"\");\r\n//       setDescription(\"\");\r\n//     }\r\n//   }, [editingTask]);\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (!title.trim()) {\r\n//       alert(\"Le titre est obligatoire\");\r\n//       return;\r\n//     }\r\n//     onSave({ title, status, dueDate, description });\r\n//   };\r\n\r\n//   return (\r\n//     <form\r\n//       onSubmit={handleSubmit}\r\n//       style={{\r\n//         marginBottom: 20,\r\n//         border: \"1px solid #ccc\",\r\n//         padding: 15,\r\n//         borderRadius: 6,\r\n//         backgroundColor: \"#fff\",\r\n//       }}\r\n//     >\r\n//       <h3>{editingTask ? \"Modifier une tâche\" : \"Ajouter une tâche\"}</h3>\r\n\r\n//       <div style={{ marginBottom: 10 }}>\r\n//         <label>Titre :</label>\r\n//         <br />\r\n//         <input\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//           style={{ width: \"100%\", padding: 5 }}\r\n//         />\r\n//       </div>\r\n\r\n//       <div style={{ marginBottom: 10 }}>\r\n//         <label>Statut :</label>\r\n//         <br />\r\n//         <select\r\n//           value={status}\r\n//           onChange={(e) => setStatus(e.target.value)}\r\n//           required\r\n//           style={{ width: \"100%\", padding: 5 }}\r\n//         >\r\n//           <option value=\"pending\">En attente</option>\r\n//           <option value=\"in-progress\">En cours</option>\r\n//           <option value=\"done\">Terminé</option>\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div style={{ marginBottom: 10 }}>\r\n//         <label>Date limite :</label>\r\n//         <br />\r\n//         <input\r\n//           type=\"date\"\r\n//           value={dueDate}\r\n//           onChange={(e) => setDueDate(e.target.value)}\r\n//           style={{ width: \"100%\", padding: 5 }}\r\n//         />\r\n//       </div>\r\n\r\n//       <div style={{ marginBottom: 10 }}>\r\n//         <label>Description :</label>\r\n//         <br />\r\n//         <textarea\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           style={{ width: \"100%\", padding: 5 }}\r\n//         />\r\n//       </div>\r\n\r\n//       <button type=\"submit\" style={{ padding: \"5px 10px\" }}>\r\n//         {editingTask ? \"Mettre à jour\" : \"Enregistrer\"}\r\n//       </button>\r\n\r\n//       {editingTask && (\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={cancelEdit}\r\n//           style={{ padding: \"5px 10px\", marginLeft: 10, background: \"#ccc\" }}\r\n//         >\r\n//           Annuler\r\n//         </button>\r\n//       )}\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n// // ======== TaskList ==========\r\n// const statusColors = {\r\n//   pending: \"#f0ad4e\",\r\n//   \"in-progress\": \"#0275d8\",\r\n//   done: \"#5cb85c\",\r\n// };\r\n\r\n// function TaskList({ tasks, onEdit, onDelete }) {\r\n//   return (\r\n//     <table\r\n//       style={{\r\n//         width: \"100%\",\r\n//         borderCollapse: \"collapse\",\r\n//         boxShadow: \"0 0 10px rgba(0,0,0,0.1)\",\r\n//         backgroundColor: \"#fff\",\r\n//       }}\r\n//     >\r\n//       <thead>\r\n//         <tr style={{ backgroundColor: \"#007BFF\", color: \"#fff\", textAlign: \"left\" }}>\r\n//           <th style={{ padding: \"10px\" }}>Titre</th>\r\n//           <th style={{ padding: \"10px\" }}>Statut</th>\r\n//           <th style={{ padding: \"10px\" }}>Date limite</th>\r\n//           <th style={{ padding: \"10px\" }}>Description</th>\r\n//           <th style={{ padding: \"10px\" }}>Actions</th>\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {tasks.length > 0 ? (\r\n//           tasks.map((task) => (\r\n//             <tr\r\n//               key={task.id}\r\n//               style={{\r\n//                 borderBottom: \"1px solid #ddd\",\r\n//                 transition: \"background-color 0.3s\",\r\n//                 cursor: \"default\",\r\n//               }}\r\n//               onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = \"#f9f9f9\")}\r\n//               onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = \"\")}\r\n//             >\r\n//               <td style={{ padding: \"8px\" }}>{task.title || \"Titre manquant\"}</td>\r\n//               <td style={{ padding: \"8px\" }}>\r\n//                 <span\r\n//                   style={{\r\n//                     padding: \"4px 8px\",\r\n//                     borderRadius: 12,\r\n//                     color: \"#fff\",\r\n//                     backgroundColor: statusColors[task.status] || \"#6c757d\",\r\n//                     fontWeight: \"bold\",\r\n//                     textTransform: \"capitalize\",\r\n//                     fontSize: \"0.9rem\",\r\n//                     display: \"inline-block\",\r\n//                     minWidth: 90,\r\n//                     textAlign: \"center\",\r\n//                   }}\r\n//                 >\r\n//                   {task.status || \"Statut manquant\"}\r\n//                 </span>\r\n//               </td>\r\n//               <td style={{ padding: \"8px\" }}>\r\n//                 {task.dueDate ? task.dueDate.substring(0, 10) : \"Date manquante\"}\r\n//               </td>\r\n//               <td style={{ padding: \"8px\" }}>{task.description || \"Description manquante\"}</td>\r\n//               <td style={{ padding: \"8px\" }}>\r\n//                 <button\r\n//                   onClick={() => onEdit(task)}\r\n//                   style={{\r\n//                     cursor: \"pointer\",\r\n//                     marginRight: 8,\r\n//                     backgroundColor: \"#ffc107\",\r\n//                     border: \"none\",\r\n//                     borderRadius: 4,\r\n//                     padding: \"4px 8px\",\r\n//                   }}\r\n//                   title=\"Modifier\"\r\n//                 >\r\n//                   ✏️\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => {\r\n//                     if (window.confirm(\"Confirmer la suppression ?\")) onDelete(task.id);\r\n//                   }}\r\n//                   style={{\r\n//                     cursor: \"pointer\",\r\n//                     backgroundColor: \"#dc3545\",\r\n//                     border: \"none\",\r\n//                     borderRadius: 4,\r\n//                     padding: \"4px 8px\",\r\n//                     color: \"#fff\",\r\n//                   }}\r\n//                   title=\"Supprimer\"\r\n//                 >\r\n//                   🗑️\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))\r\n//         ) : (\r\n//           <tr>\r\n//             <td colSpan=\"5\" style={{ textAlign: \"center\", padding: 20 }}>\r\n//               Aucune tâche disponible\r\n//             </td>\r\n//           </tr>\r\n//         )}\r\n//       </tbody>\r\n//     </table>\r\n//   );\r\n// }\r\n\r\n// // ======== APP PRINCIPAL ==========\r\n// export default function App() {\r\n//   const [token, setToken] = useState(\"\");\r\n//   const [userName, setUserName] = useState(\"\");\r\n//   const [view, setView] = useState(\"login\"); // login | register | dashboard\r\n\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n\r\n//   // Charger les tâches quand on est connecté et sur dashboard\r\n//   useEffect(() => {\r\n//     if (token && view === \"dashboard\") {\r\n//       fakeApi.getTasks().then(setTasks);\r\n//     }\r\n//   }, [token, view]);\r\n\r\n//   // Connexion réussie\r\n//   const handleLogin = (jwt, name) => {\r\n//     setToken(jwt);\r\n//     setUserName(name);\r\n//     setView(\"dashboard\");\r\n//   };\r\n\r\n//   // Déconnexion\r\n//   const handleLogout = () => {\r\n//     setToken(\"\");\r\n//     setUserName(\"\");\r\n//     setTasks([]);\r\n//     setEditingTask(null);\r\n//     setView(\"login\");\r\n//   };\r\n\r\n//   // Enregistrer / modifier tâche\r\n//   const handleSaveTask = (taskData) => {\r\n//     if (editingTask) {\r\n//       fakeApi.updateTask(editingTask.id, taskData).then((updated) => {\r\n//         setTasks(tasks.map((t) => (t.id === updated.id ? updated : t)));\r\n//         setEditingTask(null);\r\n//       });\r\n//     } else {\r\n//       fakeApi.createTask(taskData).then((newTask) => {\r\n//         setTasks([...tasks, newTask]);\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // Supprimer tâche\r\n//   const handleDeleteTask = (id) => {\r\n//     fakeApi.deleteTask(id).then(() => {\r\n//       setTasks(tasks.filter((t) => t.id !== id));\r\n//       if (editingTask && editingTask.id === id) {\r\n//         setEditingTask(null);\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   if (view === \"login\") {\r\n//     return (\r\n//       <>\r\n//         <Login onLogin={handleLogin} />\r\n//         <p style={{ textAlign: \"center\" }}>\r\n//           Pas encore de compte ?{\" \"}\r\n//           <button\r\n//             onClick={() => setView(\"register\")}\r\n//             style={{\r\n//               color: \"blue\",\r\n//               cursor: \"pointer\",\r\n//               border: \"none\",\r\n//               background: \"none\",\r\n//               padding: 0,\r\n//             }}\r\n//           >\r\n//             Inscrivez-vous\r\n//           </button>\r\n//         </p>\r\n//       </>\r\n//     );\r\n//   }\r\n\r\n//   if (view === \"register\") {\r\n//     return (\r\n//       <>\r\n//         <Register onRegister={() => setView(\"login\")} />\r\n//         <p style={{ textAlign: \"center\" }}>\r\n//           Déjà un compte ?{\" \"}\r\n//           <button\r\n//             onClick={() => setView(\"login\")}\r\n//             style={{\r\n//               color: \"blue\",\r\n//               cursor: \"pointer\",\r\n//               border: \"none\",\r\n//               background: \"none\",\r\n//               padding: 0,\r\n//             }}\r\n//           >\r\n//             Connectez-vous\r\n//           </button>\r\n//         </p>\r\n//       </>\r\n//     );\r\n//   }\r\n\r\n//   if (view === \"dashboard\") {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           maxWidth: 900,\r\n//           margin: \"auto\",\r\n//           padding: 20,\r\n//                    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n//           backgroundColor: \"#f5f5f5\",\r\n//           minHeight: \"100vh\",\r\n//         }}\r\n//       >\r\n//         <Navbar onLogout={handleLogout} userName={userName} />\r\n\r\n//         <TaskForm\r\n//           onSave={handleSaveTask}\r\n//           editingTask={editingTask}\r\n//           cancelEdit={() => setEditingTask(null)}\r\n//         />\r\n\r\n//         <TaskList\r\n//           tasks={tasks}\r\n//           onEdit={setEditingTask}\r\n//           onDelete={handleDeleteTask}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return null; // fallback, ne devrait jamais arriver\r\n// }\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"./Navbar\";      // Si tu as un composant Navbar séparé\r\nimport Login from \"./Login\";        // Idem pour Login/Register/Form\r\nimport Register from \"./Register\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskFilter from \"./TaskFilter\";\r\n\r\nconst API_URL = \"http://localhost:4000/api\"; // Change si nécessaire\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || \"\");\r\n  const [userName, setUserName] = useState(localStorage.getItem(\"userName\") || \"\");\r\n  const [view, setView] = useState(token ? \"dashboard\" : \"login\");\r\n\r\n  const [tasks, setTasks] = useState([]);\r\n  const [editingTask, setEditingTask] = useState(null);\r\n  const [filters, setFilters] = useState({\r\n    status: \"\",\r\n    search: \"\",\r\n    sortField: \"\",\r\n    sortOrder: \"asc\",\r\n  });\r\n\r\n  // Fonction pour charger les tâches depuis backend avec filtres\r\n  const fetchTasks = async () => {\r\n    if (!token) return;\r\n\r\n    try {\r\n      // Construire query string avec filtres\r\n      const params = new URLSearchParams();\r\n\r\n      if (filters.status) params.append(\"status\", filters.status);\r\n      if (filters.search) params.append(\"search\", filters.search);\r\n      if (filters.sortField) params.append(\"sortField\", filters.sortField);\r\n      if (filters.sortOrder) params.append(\"sortOrder\", filters.sortOrder);\r\n\r\n      const res = await fetch(`${API_URL}/tasks?${params.toString()}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (!res.ok) throw new Error(\"Erreur lors du chargement des tâches\");\r\n      const data = await res.json();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      alert(error.message);\r\n      if (error.message.includes(\"401\")) handleLogout(); // Token expiré ou invalide\r\n    }\r\n  };\r\n\r\n  // Charger tâches à l'initial et à chaque changement de filtre\r\n  useEffect(() => {\r\n    if (view === \"dashboard\") {\r\n      fetchTasks();\r\n    }\r\n  }, [view, filters]);\r\n\r\n  // Connexion\r\n  const handleLogin = async (email, password) => {\r\n    try {\r\n      const res = await fetch(`${API_URL}/users/login`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.message || \"Erreur de connexion\");\r\n      setToken(data.token);\r\n      setUserName(data.name);\r\n      localStorage.setItem(\"token\", data.token);\r\n      localStorage.setItem(\"userName\", data.name);\r\n      setView(\"dashboard\");\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // Inscription\r\n  const handleRegister = async (name, email, password) => {\r\n    try {\r\n      const res = await fetch(`${API_URL}/users`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ name, email, password }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.message || \"Erreur lors de l'inscription\");\r\n      alert(\"Inscription réussie ! Connectez-vous.\");\r\n      setView(\"login\");\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // Déconnexion\r\n  const handleLogout = () => {\r\n    setToken(\"\");\r\n    setUserName(\"\");\r\n    setTasks([]);\r\n    setEditingTask(null);\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userName\");\r\n    setView(\"login\");\r\n  };\r\n\r\n  // Sauvegarder tâche (création ou mise à jour)\r\n  const handleSaveTask = async (taskData) => {\r\n    try {\r\n      const method = editingTask ? \"PUT\" : \"POST\";\r\n      const url = editingTask\r\n        ? `${API_URL}/tasks/${editingTask._id}`\r\n        : `${API_URL}/tasks`;\r\n\r\n      const res = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(taskData),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.message || \"Erreur lors de l'enregistrement\");\r\n\r\n      if (editingTask) {\r\n        setTasks(tasks.map((t) => (t._id === data._id ? data : t)));\r\n        setEditingTask(null);\r\n      } else {\r\n        setTasks([...tasks, data]);\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // Supprimer tâche\r\n  const handleDeleteTask = async (id) => {\r\n    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n\r\n    try {\r\n      const res = await fetch(`${API_URL}/tasks/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      if (!res.ok) throw new Error(\"Erreur lors de la suppression\");\r\n      setTasks(tasks.filter((t) => t._id !== id));\r\n      if (editingTask && editingTask._id === id) setEditingTask(null);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // Changement des filtres venant du composant TaskFilter\r\n  const handleFilterChange = (newFilters) => {\r\n    setFilters(newFilters);\r\n  };\r\n\r\n  if (view === \"login\") {\r\n    return (\r\n      <>\r\n        <Login onLogin={handleLogin} />\r\n        <p style={{ textAlign: \"center\" }}>\r\n          Pas encore de compte ?{\" \"}\r\n          <button\r\n            onClick={() => setView(\"register\")}\r\n            style={{ color: \"blue\", cursor: \"pointer\", border: \"none\", background: \"none\", padding: 0 }}\r\n          >\r\n            Inscrivez-vous\r\n          </button>\r\n        </p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (view === \"register\") {\r\n    return (\r\n      <>\r\n        <Register onRegister={handleRegister} />\r\n        <p style={{ textAlign: \"center\" }}>\r\n          Déjà un compte ?{\" \"}\r\n          <button\r\n            onClick={() => setView(\"login\")}\r\n            style={{ color: \"blue\", cursor: \"pointer\", border: \"none\", background: \"none\", padding: 0 }}\r\n          >\r\n            Connectez-vous\r\n          </button>\r\n        </p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (view === \"dashboard\") {\r\n    return (\r\n      <div style={{ maxWidth: 900, margin: \"auto\", padding: 20, fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\", backgroundColor: \"#f5f5f5\", minHeight: \"100vh\" }}>\r\n        <Navbar onLogout={handleLogout} userName={userName} />\r\n\r\n        <TaskForm onSave={handleSaveTask} editingTask={editingTask} cancelEdit={() => setEditingTask(null)} />\r\n\r\n        <TaskFilter onFilterChange={handleFilterChange} />\r\n\r\n        <TaskList tasks={tasks} onEdit={setEditingTask} onDelete={handleDeleteTask} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
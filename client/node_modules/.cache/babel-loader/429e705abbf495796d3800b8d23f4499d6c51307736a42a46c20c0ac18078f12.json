{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login'); // login | register | tasks\n//   const [tasks, setTasks] = useState([]);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n//     // Fetch tasks after login\n//     const { getTasks } = await import('./services/api');\n//     const fetched = await getTasks(jwt);\n//     setTasks(Array.isArray(fetched) ? fetched : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setView('login');\n//   };\n\n//   // Listen for taskAdded event to refresh tasks\n//   React.useEffect(() => {\n//     if (!token || view !== 'tasks') return;\n//     const { getTasks } = require('./services/api');\n//     const fetchTasks = async () => {\n//       const fetched = await getTasks(token);\n//       setTasks(Array.isArray(fetched) ? fetched : []);\n//     };\n//     fetchTasks();\n//     const handler = () => fetchTasks();\n//     window.addEventListener('taskAdded', handler);\n//     return () => window.removeEventListener('taskAdded', handler);\n//   }, [token, view]);\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\n//       {!token && view === 'login' && (\n//         <>\n//           <Login onLogin={handleLogin} />\n//           <p>\n//             Pas de compte ?{' '}\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {!token && view === 'register' && (\n//         <>\n//           <Register onRegister={() => setView('login')} />\n//           <p>\n//             Déjà un compte ?{' '}\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\n//           </p>\n//         </>\n//       )}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <button onClick={handleLogout}>Déconnexion</button>\n//           <TaskForm token={token} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// // import React, { useState, useEffect } from 'react';\n// // import Navbar from './components/Navbar';\n// // import Login from './components/Login';\n// // import Register from './components/Register';\n// // import TaskForm from './components/TaskForm';\n// // import TaskList from './components/TaskList';\n// // import IdeaForm from './components/IdeaForm';\n// // import IdeaTable from './components/IdeaTable';\n// // import { getTasks, getIdeas } from './services/api';\n\n// // export default function App() {\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\n// //   const [view, setView] = useState('login');\n// //   const [tasks, setTasks] = useState([]);\n// //   const [ideas, setIdeas] = useState([]);\n\n// //   const handleLogin = async (jwt) => {\n// //     localStorage.setItem('token', jwt);\n// //     setToken(jwt);\n// //     setView('tasks');\n\n// //     const fetchedTasks = await getTasks(jwt);\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n// //     const fetchedIdeas = await getIdeas(jwt);\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem('token');\n// //     setToken('');\n// //     setTasks([]);\n// //     setIdeas([]);\n// //     setView('login');\n// //   };\n\n// //   // Rafraîchir les données quand on change de vue\n// //   useEffect(() => {\n// //     if (!token) return;\n// //     if (view === 'tasks') {\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n// //     }\n// //     if (view === 'ideas') {\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n// //     }\n// //   }, [view, token]);\n\n// //   return (\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n// //       {token && view === 'tasks' && (\n// //         <>\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n// //         </>\n// //       )}\n\n// //       {token && view === 'ideas' && (\n// //         <>\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n// //         </>\n// //       )}\n// //     </div>\n// //   );\n// // }\n// --------------------------------------------\n// import React, { useState, useEffect } from 'react';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Navbar from './components/Navbar';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\n\n// export default function App() {\n//   // Récupérer token en localStorage si présent\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n\n//   // Définir la page active selon si token existe ou pas\n//   // Si token, plateforme; sinon login par défaut\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\n\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n\n//   // Charger les données à chaque changement de token ou view\n//   useEffect(() => {\n//     if (!token) return;\n\n//     if (view === 'tasks') {\n//       getTasks(token)\n//         .then(data => setTasks(data))\n//         .catch(console.error);\n//     } else if (view === 'ideas') {\n//       getIdeas(token)\n//         .then(data => setIdeas(data))\n//         .catch(console.error);\n//     }\n//   }, [token, view]);\n\n//   // Gestion login réussie : stocker token, passer à la plateforme\n//   function handleLogin(newToken) {\n//     localStorage.setItem('token', newToken);\n//     setToken(newToken);\n//     setPage('platform');  // on passe à la plateforme après login\n//   }\n\n//   // Gestion logout : supprimer token, revenir au login\n//   function handleLogout() {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setPage('login');  // revenir à la page login\n//   }\n\n//   // Affichage conditionnel selon page\n//   if (page === 'login') {\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\n//   }\n\n//   if (page === 'register') {\n//     return <Register goToLogin={() => setPage('login')} />;\n//   }\n\n//   // Page plateforme principale (tasks + ideas)\n//   return (\n//     <div>\n//       <Navbar setView={setView} handleLogout={handleLogout} />\n//       {view === 'tasks' && (\n//         <>\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\n//         </>\n//       )}\n//       {view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport IdeaForm from './components/IdeaForm';\nimport IdeaTable from './components/IdeaTable';\nimport { getTasks, getIdeas } from './services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [view, setView] = useState('login');\n  const [tasks, setTasks] = useState([]);\n  const [ideas, setIdeas] = useState([]);\n  const handleLogin = async jwt => {\n    localStorage.setItem('token', jwt);\n    setToken(jwt);\n    setView('tasks');\n    const fetchedTasks = await getTasks(jwt);\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n    const fetchedIdeas = await getIdeas(jwt);\n    setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setTasks([]);\n    setIdeas([]);\n    setView('login');\n  };\n\n  // Rafraîchir les données quand on change de vue\n  useEffect(() => {\n    if (!token) return;\n    if (view === 'tasks') {\n      getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n    }\n    if (view === 'ideas') {\n      getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n    }\n  }, [view, token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: 'auto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setView: setView,\n      token: token,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), !token && view === 'login' && /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 38\n    }, this), !token && view === 'register' && /*#__PURE__*/_jsxDEV(Register, {\n      onRegister: () => setView('login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 41\n    }, this), token && view === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        token: token,\n        onSave: newTask => setTasks([...tasks, newTask])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        token: token,\n        tasks: tasks,\n        setTasks: setTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), token && view === 'ideas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(IdeaForm, {\n        token: token,\n        onSave: newIdea => setIdeas([...ideas, newIdea])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IdeaTable, {\n        token: token,\n        ideas: ideas,\n        setIdeas: setIdeas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hRJDm8EX0BCNHtMy6se9VMJ9aEc=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Login","Register","TaskForm","TaskList","IdeaForm","IdeaTable","getTasks","getIdeas","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","localStorage","getItem","view","setView","tasks","setTasks","ideas","setIdeas","handleLogin","jwt","setItem","fetchedTasks","Array","isArray","fetchedIdeas","handleLogout","removeItem","then","data","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onRegister","onSave","newTask","newIdea","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login'); // login | register | tasks\r\n//   const [tasks, setTasks] = useState([]);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n//     // Fetch tasks after login\r\n//     const { getTasks } = await import('./services/api');\r\n//     const fetched = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetched) ? fetched : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setView('login');\r\n//   };\r\n\r\n//   // Listen for taskAdded event to refresh tasks\r\n//   React.useEffect(() => {\r\n//     if (!token || view !== 'tasks') return;\r\n//     const { getTasks } = require('./services/api');\r\n//     const fetchTasks = async () => {\r\n//       const fetched = await getTasks(token);\r\n//       setTasks(Array.isArray(fetched) ? fetched : []);\r\n//     };\r\n//     fetchTasks();\r\n//     const handler = () => fetchTasks();\r\n//     window.addEventListener('taskAdded', handler);\r\n//     return () => window.removeEventListener('taskAdded', handler);\r\n//   }, [token, view]);\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 600, margin: 'auto', padding: 20 }}>\r\n//       {!token && view === 'login' && (\r\n//         <>\r\n//           <Login onLogin={handleLogin} />\r\n//           <p>\r\n//             Pas de compte ?{' '}\r\n//             <button onClick={() => setView('register')}>Inscrivez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {!token && view === 'register' && (\r\n//         <>\r\n//           <Register onRegister={() => setView('login')} />\r\n//           <p>\r\n//             Déjà un compte ?{' '}\r\n//             <button onClick={() => setView('login')}>Connectez-vous</button>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <button onClick={handleLogout}>Déconnexion</button>\r\n//           <TaskForm token={token} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} onEdit={() => {}} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import Navbar from './components/Navbar';\r\n// // import Login from './components/Login';\r\n// // import Register from './components/Register';\r\n// // import TaskForm from './components/TaskForm';\r\n// // import TaskList from './components/TaskList';\r\n// // import IdeaForm from './components/IdeaForm';\r\n// // import IdeaTable from './components/IdeaTable';\r\n// // import { getTasks, getIdeas } from './services/api';\r\n\r\n// // export default function App() {\r\n// //   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n// //   const [view, setView] = useState('login');\r\n// //   const [tasks, setTasks] = useState([]);\r\n// //   const [ideas, setIdeas] = useState([]);\r\n\r\n// //   const handleLogin = async (jwt) => {\r\n// //     localStorage.setItem('token', jwt);\r\n// //     setToken(jwt);\r\n// //     setView('tasks');\r\n\r\n// //     const fetchedTasks = await getTasks(jwt);\r\n// //     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n// //     const fetchedIdeas = await getIdeas(jwt);\r\n// //     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem('token');\r\n// //     setToken('');\r\n// //     setTasks([]);\r\n// //     setIdeas([]);\r\n// //     setView('login');\r\n// //   };\r\n\r\n// //   // Rafraîchir les données quand on change de vue\r\n// //   useEffect(() => {\r\n// //     if (!token) return;\r\n// //     if (view === 'tasks') {\r\n// //       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //     if (view === 'ideas') {\r\n// //       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n// //     }\r\n// //   }, [view, token]);\r\n\r\n// //   return (\r\n// //     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n// //       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n// //       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n// //       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n// //       {token && view === 'tasks' && (\r\n// //         <>\r\n// //           <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n// //           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {token && view === 'ideas' && (\r\n// //         <>\r\n// //           <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n// //           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n// //         </>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n// --------------------------------------------\r\n// import React, { useState, useEffect } from 'react';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import Navbar from './components/Navbar';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { login, register, getTasks, createTask, updateTask, deleteTask, getIdeas, createIdea, updateIdea, deleteIdea } from './services/api';\r\n\r\n// export default function App() {\r\n//   // Récupérer token en localStorage si présent\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  \r\n//   // Définir la page active selon si token existe ou pas\r\n//   // Si token, plateforme; sinon login par défaut\r\n//   const [page, setPage] = useState(token ? 'platform' : 'login');\r\n  \r\n//   const [view, setView] = useState('tasks'); // vue active, 'tasks' ou 'ideas'\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n\r\n//   // Charger les données à chaque changement de token ou view\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     if (view === 'tasks') {\r\n//       getTasks(token)\r\n//         .then(data => setTasks(data))\r\n//         .catch(console.error);\r\n//     } else if (view === 'ideas') {\r\n//       getIdeas(token)\r\n//         .then(data => setIdeas(data))\r\n//         .catch(console.error);\r\n//     }\r\n//   }, [token, view]);\r\n\r\n//   // Gestion login réussie : stocker token, passer à la plateforme\r\n//   function handleLogin(newToken) {\r\n//     localStorage.setItem('token', newToken);\r\n//     setToken(newToken);\r\n//     setPage('platform');  // on passe à la plateforme après login\r\n//   }\r\n\r\n//   // Gestion logout : supprimer token, revenir au login\r\n//   function handleLogout() {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setPage('login');  // revenir à la page login\r\n//   }\r\n\r\n//   // Affichage conditionnel selon page\r\n//   if (page === 'login') {\r\n//     return <Login onLogin={handleLogin} goToRegister={() => setPage('register')} />;\r\n//   }\r\n\r\n//   if (page === 'register') {\r\n//     return <Register goToLogin={() => setPage('login')} />;\r\n//   }\r\n\r\n//   // Page plateforme principale (tasks + ideas)\r\n//   return (\r\n//     <div>\r\n//       <Navbar setView={setView} handleLogout={handleLogout} />\r\n//       {view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm token={token} onSave={newTask => setTasks([...tasks, newTask])} />\r\n//           <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n//         </>\r\n//       )}\r\n//       {view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={newIdea => setIdeas([...ideas, newIdea])} />\r\n//           <IdeaTable ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\nimport React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskList from './components/TaskList';\r\nimport IdeaForm from './components/IdeaForm';\r\nimport IdeaTable from './components/IdeaTable';\r\nimport { getTasks, getIdeas } from './services/api';\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [view, setView] = useState('login');\r\n  const [tasks, setTasks] = useState([]);\r\n  const [ideas, setIdeas] = useState([]);\r\n\r\n  const handleLogin = async (jwt) => {\r\n    localStorage.setItem('token', jwt);\r\n    setToken(jwt);\r\n    setView('tasks');\r\n\r\n    const fetchedTasks = await getTasks(jwt);\r\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n    const fetchedIdeas = await getIdeas(jwt);\r\n    setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken('');\r\n    setTasks([]);\r\n    setIdeas([]);\r\n    setView('login');\r\n  };\r\n\r\n  // Rafraîchir les données quand on change de vue\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    if (view === 'tasks') {\r\n      getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n    }\r\n    if (view === 'ideas') {\r\n      getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n    }\r\n  }, [view, token]);\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n      <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n      {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n      {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n      {token && view === 'tasks' && (\r\n        <>\r\n          <TaskForm token={token} onSave={(newTask) => setTasks([...tasks, newTask])} />\r\n          <TaskList token={token} tasks={tasks} setTasks={setTasks} />\r\n        </>\r\n      )}\r\n\r\n      {token && view === 'ideas' && (\r\n        <>\r\n          <IdeaForm token={token} onSave={(newIdea) => setIdeas([...ideas, newIdea])} />\r\n          <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
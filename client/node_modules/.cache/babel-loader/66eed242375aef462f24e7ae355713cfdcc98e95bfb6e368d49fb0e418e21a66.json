{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Bureau\\\\Gomaycode project\\\\final project\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { getTasks, getIdeas, createIdea, createTask, updateTask } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState('login'); // login | register | tasks | ideas\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n\n//     const fetchedTasks = await getTasks(jwt);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n//     const fetchedIdeas = await getIdeas(jwt);\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setEditingTask(null);\n//     setView('login');\n//   };\n\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\n//     }\n//     if (view === 'ideas') {\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\n//     }\n//   }, [view, token]);\n\n//   // Gère création ou mise à jour de tâche\n//   const handleSaveTask = async (taskData) => {\n//     if (editingTask) {\n//       const updated = await updateTask(token, editingTask._id, taskData);\n//       setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\n//       setEditingTask(null);  // Réinitialise formulaire après modification\n//     } else {\n//       const created = await createTask(token, taskData);\n//       setTasks([...tasks, created]);\n//       setEditingTask(null);  // Réinitialise formulaire après ajout\n//     }\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm\n//             token={token}\n//             onSave={handleSaveTask}\n//             editingTask={editingTask}\n//             cancelEdit={() => setEditingTask(null)}\n//           />\n//           <TaskList\n//             token={token}\n//             tasks={tasks}\n//             setTasks={setTasks}\n//             onEdit={setEditingTask}\n//           />\n//         </>\n//       )}\n\n//       {token && view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={(ideaData) => {\n//             createIdea(token, ideaData).then(newIdea => {\n//               setIdeas([...ideas, newIdea]);\n//             });\n//           }} />\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// ---------------------------avec module idea -----------------------------------------\n// import React, { useState, useEffect } from 'react';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import TaskForm from './components/TaskForm';\n// import TaskList from './components/TaskList';\n// import IdeaForm from './components/IdeaForm';\n// import IdeaTable from './components/IdeaTable';\n// import { getTasks, getIdeas, createIdea, createTask, updateTask } from './services/api';\n\n// export default function App() {\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks | ideas\n//   const [tasks, setTasks] = useState([]);\n//   const [ideas, setIdeas] = useState([]);\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   const handleLogin = async (jwt) => {\n//     localStorage.setItem('token', jwt);\n//     setToken(jwt);\n//     setView('tasks');\n\n//     const fetchedTasks = await getTasks(jwt);\n//     console.log('Tâches après login:', fetchedTasks);\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n\n//     const fetchedIdeas = await getIdeas(jwt);\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setToken('');\n//     setTasks([]);\n//     setIdeas([]);\n//     setEditingTask(null);\n//     setView('login');\n//   };\n\n//   useEffect(() => {\n//     if (!token) return;\n//     if (view === 'tasks') {\n//       getTasks(token).then(data => {\n//         console.log('Tâches chargées dans useEffect:', data);\n//         setTasks(Array.isArray(data) ? data : []);\n//       });\n//     }\n//     if (view === 'ideas') {\n//       getIdeas(token).then(data => {\n//         setIdeas(Array.isArray(data) ? data : []);\n//       });\n//     }\n//   }, [view, token]);\n\n//   const handleSaveTask = async (taskData) => {\n//     if (editingTask) {\n//       const updated = await updateTask(token, editingTask._id, taskData);\n//       if (!updated.error) {\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\n//         setEditingTask(null);\n//       } else {\n//         alert(`Erreur mise à jour: ${updated.error}`);\n//       }\n//     } else {\n//       const created = await createTask(token, taskData);\n//       if (!created.error) {\n//         setTasks([...tasks, created]);\n//         setEditingTask(null);\n//       } else {\n//         alert(`Erreur création: ${created.error}`);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\n\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\n\n//       {token && view === 'tasks' && (\n//         <>\n//           <TaskForm\n//             token={token}\n//             onSave={handleSaveTask}\n//             editingTask={editingTask}\n//             cancelEdit={() => setEditingTask(null)}\n//           />\n//           <TaskList\n//             token={token}\n//             tasks={tasks}\n//             setTasks={setTasks}\n//             onEdit={setEditingTask}\n//           />\n//         </>\n//       )}\n\n//       {token && view === 'ideas' && (\n//         <>\n//           <IdeaForm token={token} onSave={(ideaData) => {\n//             createIdea(token, ideaData).then(newIdea => {\n//               if (!newIdea.error) {\n//                 setIdeas([...ideas, newIdea]);\n//               } else {\n//                 alert(`Erreur création idée: ${newIdea.error}`);\n//               }\n//             });\n//           }} />\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\n//         </>\n//       )}\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { getTasks, createTask, updateTask } from './services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\n  const [tasks, setTasks] = useState([]);\n  const [editingTask, setEditingTask] = useState(null);\n  const handleLogin = async jwt => {\n    localStorage.setItem('token', jwt);\n    setToken(jwt);\n    setView('tasks');\n    const fetchedTasks = await getTasks(jwt);\n    console.log('Tâches après login:', fetchedTasks);\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setTasks([]);\n    setEditingTask(null);\n    setView('login');\n  };\n  useEffect(() => {\n    if (!token) return;\n    if (view === 'tasks') {\n      getTasks(token).then(data => {\n        console.log('Tâches chargées dans useEffect:', data);\n        setTasks(Array.isArray(data) ? data : []);\n      });\n    }\n  }, [view, token]);\n  const handleSaveTask = async taskData => {\n    if (editingTask) {\n      const updated = await updateTask(token, editingTask._id, taskData);\n      if (!updated.error) {\n        setTasks(tasks.map(t => t._id === updated._id ? updated : t));\n        setEditingTask(null);\n      } else {\n        alert(`Erreur mise à jour: ${updated.error}`);\n      }\n    } else {\n      const created = await createTask(token, taskData);\n      if (!created.error) {\n        setTasks([...tasks, created]);\n        setEditingTask(null);\n      } else {\n        alert(`Erreur création: ${created.error}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 800,\n      margin: 'auto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setView: setView,\n      token: token,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), !token && view === 'login' && /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 38\n    }, this), !token && view === 'register' && /*#__PURE__*/_jsxDEV(Register, {\n      onRegister: () => setView('login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 41\n    }, this), token && view === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        token: token,\n        onSave: handleSaveTask,\n        editingTask: editingTask,\n        cancelEdit: () => setEditingTask(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        token: token,\n        tasks: tasks,\n        setTasks: setTasks,\n        onEdit: setEditingTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Nf0s7UqSDYJHsLXbD1NPv2r7coY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Login","Register","TaskForm","TaskList","getTasks","createTask","updateTask","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","setToken","localStorage","getItem","view","setView","tasks","setTasks","editingTask","setEditingTask","handleLogin","jwt","setItem","fetchedTasks","console","log","Array","isArray","handleLogout","removeItem","then","data","handleSaveTask","taskData","updated","_id","error","map","t","alert","created","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onRegister","onSave","cancelEdit","onEdit","_c","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Bureau/Gomaycode project/final project/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { getTasks, getIdeas, createIdea, createTask, updateTask } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState('login'); // login | register | tasks | ideas\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n//     const fetchedIdeas = await getIdeas(jwt);\r\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setEditingTask(null);\r\n//     setView('login');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => setTasks(Array.isArray(data) ? data : []));\r\n//     }\r\n//     if (view === 'ideas') {\r\n//       getIdeas(token).then(data => setIdeas(Array.isArray(data) ? data : []));\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   // Gère création ou mise à jour de tâche\r\n//   const handleSaveTask = async (taskData) => {\r\n//     if (editingTask) {\r\n//       const updated = await updateTask(token, editingTask._id, taskData);\r\n//       setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n//       setEditingTask(null);  // Réinitialise formulaire après modification\r\n//     } else {\r\n//       const created = await createTask(token, taskData);\r\n//       setTasks([...tasks, created]);\r\n//       setEditingTask(null);  // Réinitialise formulaire après ajout\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm\r\n//             token={token}\r\n//             onSave={handleSaveTask}\r\n//             editingTask={editingTask}\r\n//             cancelEdit={() => setEditingTask(null)}\r\n//           />\r\n//           <TaskList\r\n//             token={token}\r\n//             tasks={tasks}\r\n//             setTasks={setTasks}\r\n//             onEdit={setEditingTask}\r\n//           />\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={(ideaData) => {\r\n//             createIdea(token, ideaData).then(newIdea => {\r\n//               setIdeas([...ideas, newIdea]);\r\n//             });\r\n//           }} />\r\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// ---------------------------avec module idea -----------------------------------------\r\n// import React, { useState, useEffect } from 'react';\r\n// import Navbar from './components/Navbar';\r\n// import Login from './components/Login';\r\n// import Register from './components/Register';\r\n// import TaskForm from './components/TaskForm';\r\n// import TaskList from './components/TaskList';\r\n// import IdeaForm from './components/IdeaForm';\r\n// import IdeaTable from './components/IdeaTable';\r\n// import { getTasks, getIdeas, createIdea, createTask, updateTask } from './services/api';\r\n\r\n// export default function App() {\r\n//   const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n//   const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks | ideas\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [ideas, setIdeas] = useState([]);\r\n//   const [editingTask, setEditingTask] = useState(null);\r\n\r\n//   const handleLogin = async (jwt) => {\r\n//     localStorage.setItem('token', jwt);\r\n//     setToken(jwt);\r\n//     setView('tasks');\r\n\r\n//     const fetchedTasks = await getTasks(jwt);\r\n//     console.log('Tâches après login:', fetchedTasks);\r\n//     setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n\r\n//     const fetchedIdeas = await getIdeas(jwt);\r\n//     setIdeas(Array.isArray(fetchedIdeas) ? fetchedIdeas : []);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken('');\r\n//     setTasks([]);\r\n//     setIdeas([]);\r\n//     setEditingTask(null);\r\n//     setView('login');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n//     if (view === 'tasks') {\r\n//       getTasks(token).then(data => {\r\n//         console.log('Tâches chargées dans useEffect:', data);\r\n//         setTasks(Array.isArray(data) ? data : []);\r\n//       });\r\n//     }\r\n//     if (view === 'ideas') {\r\n//       getIdeas(token).then(data => {\r\n//         setIdeas(Array.isArray(data) ? data : []);\r\n//       });\r\n//     }\r\n//   }, [view, token]);\r\n\r\n//   const handleSaveTask = async (taskData) => {\r\n//     if (editingTask) {\r\n//       const updated = await updateTask(token, editingTask._id, taskData);\r\n//       if (!updated.error) {\r\n//         setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n//         setEditingTask(null);\r\n//       } else {\r\n//         alert(`Erreur mise à jour: ${updated.error}`);\r\n//       }\r\n//     } else {\r\n//       const created = await createTask(token, taskData);\r\n//       if (!created.error) {\r\n//         setTasks([...tasks, created]);\r\n//         setEditingTask(null);\r\n//       } else {\r\n//         alert(`Erreur création: ${created.error}`);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n//       <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n//       {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n//       {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n//       {token && view === 'tasks' && (\r\n//         <>\r\n//           <TaskForm\r\n//             token={token}\r\n//             onSave={handleSaveTask}\r\n//             editingTask={editingTask}\r\n//             cancelEdit={() => setEditingTask(null)}\r\n//           />\r\n//           <TaskList\r\n//             token={token}\r\n//             tasks={tasks}\r\n//             setTasks={setTasks}\r\n//             onEdit={setEditingTask}\r\n//           />\r\n//         </>\r\n//       )}\r\n\r\n//       {token && view === 'ideas' && (\r\n//         <>\r\n//           <IdeaForm token={token} onSave={(ideaData) => {\r\n//             createIdea(token, ideaData).then(newIdea => {\r\n//               if (!newIdea.error) {\r\n//                 setIdeas([...ideas, newIdea]);\r\n//               } else {\r\n//                 alert(`Erreur création idée: ${newIdea.error}`);\r\n//               }\r\n//             });\r\n//           }} />\r\n//           <IdeaTable token={token} ideas={ideas} setIdeas={setIdeas} />\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\nimport React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport TaskForm from './components/TaskForm';\r\nimport TaskList from './components/TaskList';\r\nimport { getTasks, createTask, updateTask } from './services/api';\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [view, setView] = useState(token ? 'tasks' : 'login'); // login | register | tasks\r\n  const [tasks, setTasks] = useState([]);\r\n  const [editingTask, setEditingTask] = useState(null);\r\n\r\n  const handleLogin = async (jwt) => {\r\n    localStorage.setItem('token', jwt);\r\n    setToken(jwt);\r\n    setView('tasks');\r\n\r\n    const fetchedTasks = await getTasks(jwt);\r\n    console.log('Tâches après login:', fetchedTasks);\r\n    setTasks(Array.isArray(fetchedTasks) ? fetchedTasks : []);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken('');\r\n    setTasks([]);\r\n    setEditingTask(null);\r\n    setView('login');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    if (view === 'tasks') {\r\n      getTasks(token).then(data => {\r\n        console.log('Tâches chargées dans useEffect:', data);\r\n        setTasks(Array.isArray(data) ? data : []);\r\n      });\r\n    }\r\n  }, [view, token]);\r\n\r\n  const handleSaveTask = async (taskData) => {\r\n    if (editingTask) {\r\n      const updated = await updateTask(token, editingTask._id, taskData);\r\n      if (!updated.error) {\r\n        setTasks(tasks.map(t => (t._id === updated._id ? updated : t)));\r\n        setEditingTask(null);\r\n      } else {\r\n        alert(`Erreur mise à jour: ${updated.error}`);\r\n      }\r\n    } else {\r\n      const created = await createTask(token, taskData);\r\n      if (!created.error) {\r\n        setTasks([...tasks, created]);\r\n        setEditingTask(null);\r\n      } else {\r\n        alert(`Erreur création: ${created.error}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: 'auto', padding: 20 }}>\r\n      <Navbar setView={setView} token={token} handleLogout={handleLogout} />\r\n\r\n      {!token && view === 'login' && <Login onLogin={handleLogin} />}\r\n      {!token && view === 'register' && <Register onRegister={() => setView('login')} />}\r\n\r\n      {token && view === 'tasks' && (\r\n        <>\r\n          <TaskForm\r\n            token={token}\r\n            onSave={handleSaveTask}\r\n            editingTask={editingTask}\r\n            cancelEdit={() => setEditingTask(null)}\r\n          />\r\n          <TaskList\r\n            token={token}\r\n            tasks={tasks}\r\n            setTasks={setTasks}\r\n            onEdit={setEditingTask}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,QAAQ,EAAEC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}